#+INCLUDE: ohjelmointi-kappaleiden-yhteiset-asetukset.org

* Funktion määritteleminen
** Funktiot ~setup()~ ja ~draw()~
   Ennen kuin ryhdymme määrittelemään funktioita ja piirtämään
   animaatioita, meidän täytyy tutustua Processing-ohjelmoinnin
   funktioihin ~setup()~ ja ~draw()~. Kun kirjoitetaan
   Processing-ohjelmia, jotka toimivat ns. /aktiivisessa/ tilassa
   - funktion ~setup()~ sisällä tehdään valmistelevat toimenpiteet,
     kuten piirtoikkunan koon asettaminen
   - funktion ~draw()~ sisällä piirretään.
   Seuraava esimerkki havainnollistaa näiden funktioiden käyttämistä.
   #+BEGIN_SRC processing :exports both
     void setup ()
     {
       // alustavat toimenpiteet
       size (400, 400);
     }

     void draw ()
     {
       // piirtäminen
       rect (200, 100, 150, 50);
     }
   #+END_SRC

   #+BEGIN_QUOTE
   Jos halutaan kirjoittaa omia funktioita tai piirtää animaatioita,
   täytyy käyttää Processing-kielen funktioita ~setup()~ ja
   ~draw()~. Ensimmäisessä tehdään alustavat toimenpiteet, toisessa
   piirretään.
   #+END_QUOTE
** Funktio
  Kaikki aiemmissa esimerkeissämme käyttämät piirtokomennot, kuten
  ~size()~ ja ~rect()~, ovat Processing-ohjelmointikielen
  /funktioita/. Tällaisia funktioita on valmiina suuri joukko, ja
  ohjelmoija voi kirjoittaa niitä lisää.

  Edellisessä esimerkissä on määritelty funktio ~setup()~. Katsotaanpa
  tarkemmin, mistä funktion määrittely koostuu.
   #+BEGIN_SRC processing :exports code
     void setup ()
     {
       size (400, 400);
     }
   #+END_SRC
   Kaikkein mystisin on ensimmäinen rivi.
   \[
   \underbrace{\texttt{void}}_\text{paluuarvo "tyhjä"}
   \overbrace{\texttt{setup}}^\text{funktion nimi}
   \underbrace{\texttt{()}}_\text{ei parametreja}
   \]
   Ensimmäinen rivi kertoo, että 
   - funktio ei anna tuloksena lukua tms. eli /paluuarvo/ on tyhjä:
     englannin kielen sana /void/ tarkoittaa tyhjää
   - funktion nimi on ~setup~
   - funktio ei tarvitse mitään lisätietoja eli /parametreja/
     toimiakseen: sulkujen sisällä ei ole mitään.

   #+BEGIN_QUOTE
   Jokaisella funktiolla on nimi. Funktiolla voi olla lisäksi
   - /paluuarvo/ eli luku tms. jonka funktio antaa tuloksena
   - /parametreja/ eli lähtötietoja, jotka funktio tarvitsee
     toimiakseen; esimerkiksi funktio ~size()~ tarvitsee parametreina
     piirtoikkunan leveyden ja korkeuden.
   #+END_QUOTE

   Ensimmäisen rivin jälkeinen osa on funktion /runko/, joka
   kirjoitetaan lauselohkon sisään.
   #+BEGIN_SRC processing :exports code
     {
       size (400, 400);
     }
   #+END_SRC
** Funktion määrittelyn osat
   #+BEGIN_QUOTE
   Funktion määrittelyssä on seuraavat osat:
   #+BEGIN_EXAMPLE
   paluuarvon_tyyppi nimi (parametrit)
   {
     funktion runko
   }
   #+END_EXAMPLE
   #+END_QUOTE

   Tässä kappaleessa funktioilla ei ole paluuarvoa, eli paluuarvon
   tyyppi on aina ~void~.
** Esimerkki
   Piirretään alla oleva kuva, jossa on vierekkäisiä ympyröitä eri
   kohdissa piirtoikkunaa.
   #+NAME: funktio-ympyraparit
   #+BEGIN_SRC processing
     void setup ()
     {
       size (400, 400);
     }

     // funktiolla ei paluuarvoa, parametreina kaksi liukulukua
     void piirraYmpyrapari (float x, float y)
     {
       final float HALKAISIJA = 30; // kunkin ympyrän halkaisija
       final float SADE = HALKAISIJA / 2.0; // kunkin ympyrän säde
       ellipse (x - SADE, y, HALKAISIJA, HALKAISIJA); // vasen ympyrä
       ellipse (x + SADE, y, HALKAISIJA, HALKAISIJA); // oikea ympyrä
     }

     void draw ()
     {
       // voimme käyttää määrittelemäämme funktiota piirtämisessä
       piirraYmpyrapari (100, 150); // ympyräpari kohtaan (100, 150)
       piirraYmpyrapari (200, 100);
       piirraYmpyrapari (300, 190);
     }
   #+END_SRC
   Koska ympyröiden piirtäminen halutaan tehdä moneen kertaan
   epäsäännöllisissä kohdissa, sitä varten kannattaa kirjoittaa
   funktio. 
   1. Annetaan funktion nimeksi ~piirraYmpyrapari~.
   2. Funktio tarvitsee kaksi lähtötietoa eli parametria: ympyräparin
      keskikohdan \(x\)- sekä \(y\)-koordinaatin. Annetaan näille
      nimiksi ~x~ ja ~y~. Molemmat ovat liukulukuja eli tyyppiä
      ~float~.
   3. Funktio ei anna tuloksena mitään lukua, eli sillä ei ole
      paluuarvoa. Niinpä paluuarvon tyyppi on ~void~.

   Ohjelmakoodi näyttää seuraavalta.
   #+BEGIN_SRC processing :exports code :noweb yes
   <<funktio-ympyraparit>>
   #+END_SRC
** Muuttujien, vakioiden ja parametrien näkyvyysalue
   Mistä tiedetään, etteivät kahdessa eri funktiossa olevat
   samannimiset muuttujat mene keskenään sekaisin?

   #+BEGIN_QUOTE
   Muuttujan /näkyvyysalueella/ tarkoitetaan sitä ohjelman osaa, jossa
   muuttujaa voidaan käyttää. Muuttujan näkyvyysalue on se lauselohko,
   jossa muuttuja määritellään, sekä lauselohkon sisällä olevat muut
   lauselohkot. 

   Kaikkien lauselohkojen ulkopuolella määritellyt muuttujat ovat
   ns. /globaaleja/ muuttujia ja näkyvät kaikissa lauselohkoissa.

   Samat säännöt pätevät myös vakioille.

   Parametrien näkyvyysalue on sen funktio runko, jonka ensimmäisellä
   rivillä parametrit määritellään.

   #+END_QUOTE
** Esimerkki
   Alla olevassa ohjelmakoodissa on kaksi funktiota, joissa molemmissa
   määritellään muuttuja ~n~. Kukin muuttuja ~n~ näkyy vain oman
   funktionsa rungossa, joten ne ovat käytännössä kaksi eri muuttujaa.
   Sama pätee molempien funktioiden parametreihin ~x~ ja ~y~.

   #+BEGIN_SRC processing :exports both
     // tikkataulun halkaisija on globaali vakio, joka näkyy kaikissa
     // funktioissa
     final float TAULUN_H = 70; 

     void setup ()
     {
       // alkuasetukset
       size (800, 500);
       colorMode (HSB, 100);
       noStroke (); // ei ääriviivoja
     }

     // piirretään yksittäinen tikkataulu parametreina annettuun kohtaan
     void piirraTikkataulu (float x, float y)
     {
       final float N = 10; // tikkataulun sisäkkäisten ympyröiden lukumäärä
       final float ASKEL = TAULUN_H / N; // ympyröiden halkaisijoiden ero

       // seuraavaksi piirrettävän ympyrän halkaisija
       float ympyranHalkaisija = TAULUN_H;

       int n = 1; // piirrettävän ympyrän järjestysnumero
       while (n <= N)
       {
         if (n % 2 == 1)
           fill (100);
         else
           fill (0);

         ellipse (x, y, ympyranHalkaisija, ympyranHalkaisija);
         ympyranHalkaisija = ympyranHalkaisija - ASKEL;
         n++;
       }
     }

     // piirretään lkm tikkataulua siten, että ensimmäisen keskikohta on
     // (x, y) ja muut ovat siitä oikealle
     void piirraTikkatauluRivi (int lkm, float x, float y)
     {
       float kpX = x; // tikkataulun keskipisteen x-koordinaatti
       int n = 1; // piirrettävän tikkataulun järjestysnumero

       while (n <= lkm)
       {
         piirraTikkataulu (kpX, y);
         kpX = kpX + TAULUN_H;
         n++;
       }
     }

     void draw ()
     {
       piirraTikkatauluRivi (3, 100, 100);
       piirraTikkatauluRivi (6, 50, 200);
       piirraTikkatauluRivi (4, 350, 300);
       piirraTikkataulu (70, 400);
     }
   #+END_SRC
** Funktioiden käyttötarkoituksia
   #+BEGIN_QUOTE
   Ohjelmoijat käyttävät funktioita mm.
   - usein tarvittujen toimintojen automatisointiin (esim. tikkataulun
     piirtäminen useaan eri kohtaan tai peräti useassa eri ohjelmassa)
   - ohjelmakoodin selkiyttämiseen (yksittäisen tikkataulun
     piirtämisen erottaminen tikkataulurivin piirtämisestä).
   #+END_QUOTE
