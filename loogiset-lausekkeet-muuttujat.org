#+INCLUDE: ohjelmointi-kappaleiden-yhteiset-asetukset.org

* Loogiset lausekkeet ja muuttujat
** Looginen lauseke
   #+BEGIN_QUOTE
   Loogisen lausekkeen arvo on joko tosi tai epätosi. Esimerkkejä
   loogisista lausekkeista ovat
   - ~1 < 2~, jonka arvo on tosi
   - ~x != y~, jonka arvo riippuu muuttujien ~x~ ja ~y~ arvoista.
   #+END_QUOTE
** Loogiset operaattorit
   Loogiset operaattoreilla voidaan yhdistää loogisia lauseita samaan
   tapaan kuin tekstissä sanoilla \ldquo{}ja\rdquo, \ldquo{}tai\rdquo
   sekä \ldquo{}ei\rdquo.
** Ja-operaattori ~&&~
   Operaattori ~&&~ vastaa suomen kielen sanaa
   \ldquo{}ja\rdquo{}. Operaattori yhdistää kaksi loogista lauseketta.
   Sen arvo on tosi täsmälleen silloin, kun molemmat sen yhdistämät
   lausekkeet ovat tosia. Esimerkiksi seuraavan lausekkeen arvo on
   tosi.
   #+BEGIN_EXAMPLE
   (1 < 2) && (3 != 4)
   #+END_EXAMPLE
   Seuraava taulukko kuvaa tarkalleen operaattorin toiminnan, kun ~A~
   ja ~B~ ovat loogisia lausekkeita.
   #+BEGIN_QUOTE
   | ~A~     | ~B~     | ~A && B~ |
   |---------+---------+----------|
   | epätosi | epätosi | epätosi  |
   | epätosi | tosi    | epätosi  |
   | tosi    | epätosi | epätosi  |
   | tosi    | tosi    | tosi     |
   #+END_QUOTE
** Esimerkki
    Alla olevassa interaktiivisessa animaatiossa piirretään eri
    värinen pystypalkki sen mukaan, onko hiiren painallus palkin sisä-
    vai ulkopuolella. 
    #+NAME: loogiset-lausekkeet-muuttujat-palkki
    #+BEGIN_SRC processing
      final int X = 200, LEVEYS = 100; // palkin x-koordinaatti ja leveys
      void setup ()
      {
        size (600, 400);
        colorMode (HSB, 100);
        background (0);
        fill (100); // alkutilanteessa piirretään valkoinen palkki
      }

      void draw ()
      {
        rect (X, 0, LEVEYS, height);
      }

      void mousePressed ()
      {
        float savy; // palkin värisävy

        // vihreä väri, jos hiiren x-koordinaatti on suorakaiteen sisällä
        if ((mouseX >= X) && (mouseX < X + LEVEYS))
          savy = 35;
        else
          savy = 0;

        fill (savy, 100, 100);
      }
    #+END_SRC
    Alla oleva ohjelmakoodi toteuttaa animaation. Painallus on palkin
    sisällä, jos hiiren \(x\)-koordinaatti on palkin oikean ja
    vasemman reunan välissä eli jos 
    #+BEGIN_EXAMPLE
    (mouseX >= X) && (mouseX < X + LEVEYS)
    #+END_EXAMPLE
    #+BEGIN_SRC processing :noweb yes :exports code
    <<loogiset-lausekkeet-muuttujat-palkki>>
    #+END_SRC
   
** Negaatio-operaattori ~!~
   Operaattori ~!~ vastaa suomen kielen sanaa \ldquo{}ei\rdquo{}. Sen
   arvo on tosi täsmälleen silloin, kun sen jälkeen seuraavan
   lausekkeen arvo on epätosi. Esimerkiksi seuraavan lausekkeen arvo
   on tosi.
   #+BEGIN_EXAMPLE
   !(-2 == 3)
   #+END_EXAMPLE
   Seuraava taulukko kuvaa tarkalleen operaattorin toiminnan, kun ~A~
   on looginen lauseke.
   #+BEGIN_QUOTE
   | ~A~     | ~!A~    |
   |---------+---------|
   | epätosi | tosi    |
   | tosi    | epätosi |
   #+END_QUOTE
** Looginen muuttuja
   #+BEGIN_QUOTE
   Tyyppiä ~boolean~ olevan muuttujan arvo on joko ~true~ (tosi) tai
   ~false~ (epätosi). Muuttujaan voidaan tallentaa loogisen lausekkeen
   arvo.
   #+END_QUOTE
** Esimerkki
   [[file:loogiset-lausekkeet-muuttujat-alternoiva-sivu.org][Tällä sivulla]] olevan animaation ohjelmoinnissa käytetään loogista
   muuttujaa sekä negaatiota. Animaation piirtävä ohjelmakoodi on
   alla. Ohjelmassa ~boolean~-tyyppisen muuttujan ~piirretaan~ arvo
   vaihtuu sekunnista toiseen todesta epätodeksi ja toisin
   päin. Huomaa, että muuttujaa voidaan käyttää suoraan ~if~-ehdossa:
   #+BEGIN_EXAMPLE
   if (piirretaan)
   #+END_EXAMPLE
   Sama testi olisi voitu kirjoittaa pidemmälläkin tavalla:
   #+BEGIN_EXAMPLE
   if (piirretaan == true)
   #+END_EXAMPLE
   #+BEGIN_SRC processing :exports code :noweb yes
   <<loogiset-lausekkeet-muuttujat-alternoiva>>
   #+END_SRC
** Tai-operaattori ~||~
   Suomen kielessä sanan \ldquo{}tai\rdquo käyttö on joskus
   monitulkintainen. Kuvitellaan, että joku sanoo: \ldquo{}Lähden
   retkelle, jos Ville tai Marika lähtee mukaan.\rdquo Mitä tällöin
   tapahtuu, jos /sekä/ Ville /että/ Marika lähtevät mukaan?

   Ohjelmointikielessä tällaista epätäsmällisyyttä ei voi
   olla. Processing-kielessä tai-operaattorin ~||~ arvo on tosi
   täsmälleen silloin, kun /vähintään toinen/ sen yhdistämistä
   lausekkeista on tosi.
   #+BEGIN_QUOTE
   | ~A~     | ~B~     | ~A~ \vert\thinsp\vert ~B~ |
   |---------+---------+---------------------------|
   | epätosi | epätosi | epätosi                   |
   | epätosi | tosi    | tosi                      |
   | tosi    | epätosi | tosi                      |
   | tosi    | tosi    | tosi                      |
   #+END_QUOTE
** Esimerkki
   [[file:loogiset-lausekkeet-muuttujat-ristikko-sivu.org][Tällä sivulla]] oleva interaktiivinen animaatio havainnollistaa sekä
   loogisten muuttujien että operaattorin ~||~ käyttöä. Animaatio on
   piirretty alla olevalla ohjelmakoodilla. Hiirtä painettaessa
   testataan, missä suhteessa painalluskohta on viivojen
   risteyskohtaan. Jos painallus on risteyskohdan vasemmalla puolella
   tai yläpuolella, viivat piirretään punaisina. Muussa tapauksessa
   viivat piirretään sinisinä.

   #+BEGIN_SRC processing :noweb yes :exports code
   <<loogiset-lausekkeet-muuttujat-ristikko>>
   #+END_SRC
** Operaattorien laskujärjestys
   Ohjelmointikielen lausekkeissa käytetään enemmän laskutoimituksia
   kuin matematiikassa. Mistä tiedetään, missä järjestyksessä
   tietokone laskee eri laskutoimitukset?

   #+BEGIN_QUOTE
   Processing-kielen \ldquo{}laskujärjestys\rdquo määräytyy alla
   olevan taulukon mukaisesti. Taulukossa ylempänä olevat operaatiot
   ovat laskujärjestyksessä korkeammalla.

   | operaatioiden nimet                  | operaattorit                        |
   |--------------------------------------+-------------------------------------|
   | negaatio                             | ~!~                                 |
   | kerto- ja jakolasku sekä jakojäännös | ~*~ \emsp ~/~ \emsp ~%~             |
   | yhteen- ja vähennyslasku             | ~+~ \emsp ~-~                       |
   | suuruusvertailut                     | ~<~ \emsp ~<=~ \emsp ~>~ \emsp ~>=~ |
   | yhtäsuuruusvertailut                 | ~==~ \emsp ~!=~                     |
   | ja                                   | ~&&~                                |
   | tai                                  | \vert\thinsp\vert                   |
   | sijoittaminen                        | ~=~                                 |
   #+END_QUOTE

   Esimerkiksi seuraavat kaksi lauseketta ovat yhtäpitäviä, koska
   suuruusvertailut ovat laskujärjestyksessä ennen ~&&~-operaattoria.
   #+BEGIN_EXAMPLE
   (mouseX >= X) && (mouseX < X + LEVEYS)
   mouseX >= X && mouseX < X + LEVEYS
   #+END_EXAMPLE
   Sulkuja voi käyttää tarvittaessa tai varmuuden vuoksi. 
** Tehtäviä
** Ratkaisuja

#+INCLUDE: loogiset-lausekkeet-muuttujat-alternoiva.org
#+INCLUDE: loogiset-lausekkeet-muuttujat-ristikko.org
