#+INCLUDE: ohjelmointi-kappaleiden-yhteiset-asetukset.org

* ~for~-silmukka
** ~for~-silmukan rakenne
   ~for~-silmukka on ~while~-silmukalle vaihtoehtoinen
   kontrollirakenne. Se on näppärän rakenteensa takia
   ~while~-silmukkaa yleisempi.

   #+BEGIN_QUOTE
   ~for~-silmukan ensimmäinen rivi sisältää ~while~-silmukkarakenteen
   kolme osaa. Ohjelmakoodi
   #+BEGIN_EXAMPLE
   float k = 0;
   while (k < width)
   {
     rect (k, k, SIVU, SIVU);
     k = k + SIVU;
   }  
   #+END_EXAMPLE
   voidaan kirjoittaa ~for~-silmukan avulla seuraavasti:
   #+BEGIN_EXAMPLE
   for (float k = 0; k < width; k = k + SIVU)
     rect (k, k, SIVU, SIVU);
   #+END_EXAMPLE
   ~for~-silmukassa on
   1. ~alkulauseke~, joka suoritetaan kun silmukkaan tullaan
      ensimmäisen kerran
   2. ~ehto~, joka määrää kuinka kauan silmukkaa suoritetaan
   3. ~päivityslauseke~, joka suoritetaan silmukan päätteeksi
      jokaisella kierroksella
   4. lauseke tai lausekelohko, joka suoritetaan niin kauan kuin ehto
      on tosi

   Rakenne on siis
   #+BEGIN_EXAMPLE
     for (alkulauseke; ehto; päivityslauseke)
       lauseke tai lohko, joka suoritetaan niin kauan kuin ehto tosi;
   #+END_EXAMPLE
   #+END_QUOTE
** {{{example}}}
   Alla oleva ohjelmakoodi piirtää neliön muotoiseen piirtoikkunaan
   samanlaisen ruudukon kuin edellisessä kappaleessa.
   #+BEGIN_SRC processing :exports both
     size (401, 401);
     final float L = 10;

     for (float p = 0; p < width; p = p + L)
     {
       line (0, p, width, p); // vaakaviiva
       line (p, 0, p, height); // pystyviiva
     }
   #+END_SRC
** Lyhenteet muuttujien päivitykselle
   Lausekkeen
   #+BEGIN_EXAMPLE
   k = k + SIVU;
   #+END_EXAMPLE
   kaltaiset muuttujien arvon päivitykset ovat niin yleisiä, että
   niitä varten on olemassa erilliset lyhenteet. Lauseke voitaisiin
   kirjoittaa myös
   #+BEGIN_EXAMPLE
   k += SIVU;
   #+END_EXAMPLE
   joka tarkoittaa siis sitä, että muuttujan ~k~ arvoon lisätään
   ~SIVU~.

   #+BEGIN_QUOTE
   Seuraava taulukko sisältää muutamia keskeisiä muuttujien
   päivittämisessä käytettyjä lyhenteitä. 
   | lyhenne  | merkitys    |
   |----------+-------------|
   | ~x += 5~ | ~x = x + 5~ |
   | ~x -= 5~ | ~x = x - 5~ |
   | ~x *= 5~ | ~x = x * 5~ |
   | ~x /= 5~ | ~x = x / 5~ |
   #+END_QUOTE
** {{{example}}}
   Alla oleva esimerkki piirtää janoja origosta kuvan alareunaan
   siten, että kuvan alareunassa vierekkäisten janojen välinen
   etäisyys on 5.

   #+BEGIN_SRC processing :exports both
     size (400, 400);

     for (float x = 0; x < width; x += 5)
       line (0, 0, x, height);
   #+END_SRC
** Useita muuttujia alkulausekkeessa tai useita lausekkeita päivityslausekkeessa
   
   #+BEGIN_QUOTE
   Jos ~for~-silmukan alkulausekkeessa halutaan määritellä useita
   muuttujia, ne voidaan erottaa toisistaan pilkulla. Samaan tapaan
   jos päivityslausekkeessa halutaan suorittaa useita lausekkeita,
   nekin voidaan erotella toisistaan pilkulla. Nämä lausekkeet
   suoritetaan järjestyksessä vasemmalta oikealle.
   #+END_QUOTE
   
   Alla olevan esimerkin silmukassa on kaksi muuttujaa, jotka molemmat
   päivitetään silmukan lopussa.
   #+BEGIN_SRC processing :exports both
     size (400, 400);
     noStroke ();
     
     final float SIVU = 10;

     for (float x = 0, y = height - SIVU; x < width; x += SIVU, y -= SIVU)
       rect (x, y, SIVU, SIVU);

   #+END_SRC
** Tehtäviä
   1. Muuta seuraava ohjelmakoodi käyttämään ~for~-silmukkaa sekä
      muuttujien päivityslyhenteitä.
      #+BEGIN_SRC processing :exports both
        size (400, 400);

        final float SIVU = 30;

        float y = height - SIVU;

        while (y >= 0)
        {
          rect (width / 2.0, y, SIVU, SIVU);
          y = y - SIVU;
        }
      #+END_SRC
   2. Muuta seuraava ohjelmakoodi käyttämään ~for~-silmukkaa sekä
      muuttujien päivityslyhenteitä.
      #+BEGIN_SRC processing :exports both
        size (400, 400);

        final float HALKAISIJA = 20;
        final float SADE = HALKAISIJA / 2;

        float x = SADE;
        float y = SADE;

        while (x < width)
        {
          ellipse (x, y, HALKAISIJA, HALKAISIJA);
          x = x + SADE;
          y = 1.1 * y;
        }

      #+END_SRC
   3. Tee ohjelma, joka piirtää ~for~-silmukan avulla alla olevan
      kaltaisen kuvan.
      - Piirtoikkunan koko on \(600\times 200\).
      - Neliöiden sivun pituus on vakio ~SIVU~ ja neliöiden välinen
        etäisyys vakio ~VALI~.
      - Neliöitä piirretään niin monta kuin niitä mahtuu. Osittain
        ikkunaan mahtuvia neliöitä ei piirretä.
      #+NAME: for-vierekkaiset-neliot
      #+BEGIN_SRC processing
        size (600, 200);

        final float SIVU = 50;
        final float VALI = 20;

        for (float x = 0; x < width - SIVU; x += SIVU + VALI)
          rect (x, 0, SIVU, SIVU);

      #+END_SRC
   4. Piirrä alla oleva kuva ~for~-silmukan avulla. Kuvassa on
      sisäkkäisiä neliöitä. Uloimman neliön sivun pituus on ~(width -
      10)~. Kunkin sisemmän neliön sivun pituus on puolet edellisen
      ulomman neliön sivun pituudesta. Sisempiä neliöitä piirretään
      niin kauan kuin niiden sivun pituus on suurempi kuin 2.
      #+NAME: for-sisakkaiset-neliot
      #+BEGIN_SRC processing
        size (600, 600);

        final float PUOLET = width / 2.0; // puolet piirtoikkunan leveydestä

        for (float sivu = width - 10; sivu > 2; sivu /= 2)
        {
          float k = PUOLET - sivu / 2.0; // vas. yläkulman x- ja y-koordinaatti
          rect (k, k, sivu, sivu);
        }
      #+END_SRC
   5. Piirrä alla oleva kuva.
      - Piirtoikkuna on neliön muotoinen.
      - Vasemmassa yläkulmassa olevan neliön sivun pituus on puolet
        piirtoikkunan sivun pituudesta.
      - Kunkin seuraavan neliön sivun pituus on puolet edellisestä.
      - Neliöitä piirretään niin kauan kuin sivun pituus on suurempi
        kuin 2.
      #+NAME: for-neliot-halkaisijalla
      #+BEGIN_SRC processing
        size (400, 400);

        // k on neliön yläkulman koordinaatti (sekä x että y)
        for (float sivu = width / 2.0, k = 0; sivu > 2; k += sivu, sivu /= 2)
          rect (k, k, sivu, sivu);
      #+END_SRC
   6. Piirrä alla oleva kuva. 
      - Piirtoikkunan koko on \(800\times 250\).
      - Vasemmanpuoleisen ympyrän halkaisija on piirtoikkunan korkeus.
      - Siirryttäessä kuvassa oikealla kunkin seuraavan ympyrän
        halkaisija on kaksi kolmasosaa edellisen ympyrän halkaisijasta.
      - Ympyröitä piirretään niin kauan kuin halkaisija on suurempi
        kuin 2.
      #+NAME: for-pienenevat-ympyrat
      #+BEGIN_SRC processing
        size (800, 250);
        
        for (float halkaisija = height, x = halkaisija / 2.0;
             halkaisija > 2;
             x += halkaisija / 2.0, halkaisija *= 2.0 / 3, x += halkaisija / 2.0)
          ellipse (x, height / 2.0, halkaisija, halkaisija);
      #+END_SRC

** Ratkaisuja
   1. 
      #+BEGIN_SRC processing :exports both
        size (400, 400);

        final float SIVU = 30;

        for (float y = height - SIVU; y >= 0; y -= SIVU)
          rect (width / 2.0, y, SIVU, SIVU);
      #+END_SRC
   2. 
      #+BEGIN_SRC processing :exports both
        size (400, 400);

        final float HALKAISIJA = 20;
        final float SADE = HALKAISIJA / 2;

        for (float x = SADE, y = SADE; x < width; x += SADE, y *= 1.1)
          ellipse (x, y, HALKAISIJA, HALKAISIJA);
      #+END_SRC
   3. 
      #+BEGIN_SRC processing :noweb yes :exports code
      <<for-vierekkaiset-neliot>>
      #+END_SRC
   4. 
      #+BEGIN_SRC processing :noweb yes :exports code
      <<for-sisakkaiset-neliot>>
      #+END_SRC
   5. 
      #+BEGIN_SRC processing :noweb yes :exports code
      <<for-neliot-halkaisijalla>>
      #+END_SRC
   6. Alla olevassa ratkaisussa ~for~-silmukan päivitysosassa
      muuttujaan ~x~ lisätään ensin isomman ja sitten pienemmän
      ympyrän säde. Toinen vaihtoehto olisi lisätä luvun
      \(\frac{5}{3}\) ja isomman ympyrän säteen tulo.
      #+BEGIN_SRC processing :noweb yes :exports code
      <<for-pienenevat-ympyrat>>
      #+END_SRC
      
