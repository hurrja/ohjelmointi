#+INCLUDE: ohjelmointi-kappaleiden-yhteiset-asetukset.org

* Funktion paluuarvo
** Esimerkki
   Useat funktiot /palauttavat/ jonkin arvon. Esimerkiksi
   Processing-kielessä valmiina oleva funktio ~float min(float a,
   float b)~ palauttaa pienemmän luvuista ~a~ ja ~b~. Funktion avulla
   voimme piirtää helposti piirtoikkunaan mahdollisimman suuren
   ympyrän.
   
   #+BEGIN_SRC processing :exports both
     size (600, 400);

     // halkaisija on leveydestä ja korkeudesta pienempi
     float halkaisija = min (width, height);

     ellipse (width / 2.0, height / 2.0, halkaisija, halkaisija);
   #+END_SRC
** Funktio, joka palauttaa arvon
   #+BEGIN_QUOTE
   Funktio
   #+BEGIN_EXAMPLE
   float min (float a, float b)
   #+END_EXAMPLE
   on esimerkki funktiosta, joka palauttaa arvon. Paluuarvon tyyppi
   näkyy funktion nimen edessä olevasta sanasta. Jos sana on ~void~,
   paluuarvoa ei ole.

   Ohjelman suorituksessa funktiokutsu korvataan
   paluuarvolla. Esimerkiksi rivillä
   #+BEGIN_EXAMPLE
   float halkaisija = min (width, height);
   #+END_EXAMPLE
   muuttujaan ~halkaisija~ sijoitetaan funktiokutsun paluuarvo.
   #+END_QUOTE
** Paluuarvon palauttaminen funktiosta
   Funktion paluuarvo palautetaan käyttämällä Processing-kielen
   varattua sanaa ~return~. Alla on esimerkki funktiosta
   #+BEGIN_EXAMPLE
   float suurempi (float a, float b)
   #+END_EXAMPLE
   joka palauttaa kahdesta luvusta suuremman. Jos luvut ovat yhtä
   suuret, on sama kumpi niistä palautetaan.
   #+BEGIN_SRC processing :exports both
     float suurempi (float a, float b)
     {
       if (a > b)
         return (a);
       else
         return (b);
     }

     void setup ()
     {
       size (600, 400);
       float halkaisija = suurempi (width, height);
       ellipse (width / 2.0, height / 2.0, halkaisija, halkaisija);
     }

     void draw ()
     {
     }
   #+END_SRC
   Vastaava funktio ~max()~ on olemassa valmiina Processing-kielessä.
** Esimerkki
   Alla olevassa esimerkissä määritellään funktio
   #+BEGIN_EXAMPLE
   boolean piirtoikkunassa (int x, int y)
   #+END_EXAMPLE
   joka palauttaa arvon ~true~ täsmälleen silloin, kun piste ~(x, y)~
   on piirtoikkunan sisällä. Muuten funktio palauttaa arvon ~false~.
   #+BEGIN_SRC processing :exports both
     boolean piirtoikkunassa (int x, int y)
     {
       return (x >= 0 && x < width && y >=0 && y < height);
     }

     void setup ()
     {
       size (400, 400);

       int x = 0, y = 0;
       final int HALKAISIJA = 10;
       while (piirtoikkunassa (x, y))
       {
         ellipse (x, y, HALKAISIJA, HALKAISIJA);
         x = x + HALKAISIJA / 2;
         y = y + HALKAISIJA;
       }
     }

     void draw ()
     {
     }
   #+END_SRC
** Tehtäviä
   1. Processing-kielen valmis funktio 
      #+BEGIN_EXAMPLE
      float dist (float x1, float y1, float x2, float y2)
      #+END_EXAMPLE
      palauttaa pisteiden ~(x1, y1)~ ja ~(x2, y2)~ välisen
      etäisyyden. (Funktion nimi tulee englannin kielen etäisyyttä
      tarkoittavasta sanasta /distance/.) Käytä funktiota alla olevan
      interaktiivisen ohjelman tekemiseen. Hiiren painallus aiheuttaa
      ympyrän piirtämisen. Ympyrän kehä kulkee hiiren painalluskohdan
      kautta, eli ympyrä säde on sama kuin painalluskohdan etäisyys
      piirtoikkunan keskipisteestä.
      #+NAME: funktion-paluuarvo-ympyra
      #+BEGIN_SRC processing
        void setup ()
        {
          size (400, 400);
          colorMode (HSB, 100);
          background (0);
        }

        void draw ()
        {
        }

        void mousePressed ()
        {
          background (0);

          // keskipisteen koordinaatit
          float x = width / 2.0, y = height / 2.0;

          float halkaisija = 2 * dist (mouseX, mouseY, x, y);
          ellipse (x, y, halkaisija, halkaisija);
        }
      #+END_SRC
   2. Processing-kielen funktiot
      #+BEGIN_EXAMPLE
      int hour ()
      int minute ()
      int second ()
      #+END_EXAMPLE
      palauttavat tämänhetkisen kellonajan tunnit, minuutit ja
      sekunnit. Tee näiden funktioiden avulla animaatio, joka näyttää
      kellonajan.
   3. Kirjoita funktion ~dist ()~ avulla oma funktio
      #+BEGIN_EXAMPLE
      boolean ympyrassa (float x, float y, float kpX, float kpY, float sade)
      #+END_EXAMPLE
      joka palauttaa arvon ~true~, jos piste ~(x, y)~ on sellaisen
      ympyrän sisällä, jonka keskipiste on ~(kpX, kpY)~ ja säde on
      ~sade~. Muussa tapauksessa paluuarvo on ~false~. Käytä
      funktiotasi alla olevan interaktiivisen animaation tekemiseen:
      ympyrän väri riippuu siitä, onko hiirtä painettu ympyrän sisällä
      vai sen ulkopuolella.
      #+NAME: funktion-paluuarvo-ympyrassa
      #+BEGIN_SRC processing
        boolean ympyrassa (float x, float y, float kpX, float kpY, float sade)
        {
          return (dist (x, y, kpX, kpY) <= sade);
        }

        final float HALKAISIJA = 100;
        float kpX, kpY; // ympyrän keskipisteen koordinaatit

        void setup ()
        {
          size (600, 400);
          colorMode (HSB, 100);
          fill (100);
          kpX = width / 2.0;
          kpY = height / 2.0;
        }

        void draw ()
        {
          ellipse (kpX, kpY, HALKAISIJA, HALKAISIJA);
        }

        void mousePressed ()
        {
          if (ympyrassa (mouseX, mouseY, kpX, kpY, HALKAISIJA / 2.0))
            fill (35, 100, 100);
          else
            fill (0, 100, 100);
        }

      #+END_SRC
   4. Kaksi suorakulmion $A$ ja $B$ leikkaaminen voidaan testata
      seuraavalla tavalla:
      - Tarkistetaan onko jokin suorakulmion $A$ kärkipisteistä
        suorakulmion $B$ sisällä.
      - Tarkistetaan lisäksi, onko yksi (vapaasti valittu)
        suorakulmion $B$ kärkipiste suorakulmion $A$ sisällä.
** Ratkaisuja
   1. 
      #+BEGIN_SRC processing :exports code :noweb yes
      <<funktion-paluuarvo-ympyra>>
      #+END_SRC
   2. 
      #+BEGIN_SRC processing :exports code
        void setup ()
        {
          size (600, 400);
          colorMode (HSB, 100);
          background (0);
          fill (100);
          textAlign (CENTER, CENTER);
          textSize (40);

          frameRate (1);
        }

        void draw ()
        {
          background (0);
  
          final float VALI = width / 6.0; // kellon eri osien välimatka
          final float KORKEUS = height / 2.0;
          text (hour (), VALI, KORKEUS);
          text (":", 2 * VALI, KORKEUS);
          text (minute (), 3 * VALI, KORKEUS);
          text (":", 4 * VALI, KORKEUS);
          text (second (), 5 * VALI, KORKEUS);
        }
      #+END_SRC
   3. 
      #+BEGIN_SRC processing :exports code :noweb yes
      <<funktion-paluuarvo-ympyrassa>>
      #+END_SRC
      
