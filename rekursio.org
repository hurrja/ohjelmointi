#+INCLUDE: ohjelmointi-kappaleiden-yhteiset-asetukset.org

#+LATEX: \usepackage{qtree}

* Rekursio
** Esimerkki
   Alla oleva kuva voitaisiin piirtää ~for~- tai ~while~-silmukan
   avulla. Se voidaan kuitenkin piirtää myös ilman silmukoita
   määrittelemällä funktio, joka kutsuu itse itseään.
   #+NAME: rekursio-sisakkaiset-ympyrat
   #+BEGIN_SRC processing
     // piirretään lkm sisäkkäistä ympyrää siten, että uloimman halkaisija
     // on d ja uloimman väri on joko valkoinen tai musta
     void piirraYmpyrat (int lkm, float d, boolean valkoinen)
     {
       // palataan jos on piirretty jo riittävästi
       if (lkm == 0)
         return;

       // valkoinen tai musta ympyrä
       if (valkoinen)
         fill (100);
       else
         fill (0);

       // piirretään ympyrä
       ellipse (width / 2.0, height / 2.0, d, d);

       // jatketaan piirtämistä, seuraavaksi pienempi jolla eri väri
       piirraYmpyrat (lkm - 1, d - 30, !valkoinen);
     }

     void setup ()
     {
       size (400, 400);
       colorMode (HSB, 100);
       noLoop ();
     }

     void draw ()
     {
       // piirretään 5 ympyrää, joista uloin on piirtoikkunan levyinen ja
       // väriltään musta
       piirraYmpyrat (5, width, false);
     }
   #+END_SRC

   #+BEGIN_SRC processing :exports code :noweb yes
   <<rekursio-sisakkaiset-ympyrat>>
   #+END_SRC
   Alla oleva kuva esittää, miten ohjelman aikana funktiota
   ~piirraYmpyrat()~ kutsutaan eri arvoilla. Viimeisessä kutsussa
   parametrin ~lkm~ arvo on 0, jolloin funktio ei enää kutsu itseään
   uudestaan. Kuvaa kutsutaan /rekursiopuuksi/ - nimityksen syy
   selviää pian.
   #+BEGIN_CENTER
   #+NAME: rekursio-sisakkaiset-ympyrat-kutsupuu
   #+BEGIN_SRC asymptote :file rekursio-sisakkaiset-ympyrat-kutsupuu.svg
     size (18cm, 0);
     usepackage ("qtree");
     usepackage ("amsmath");
     defaultpen (fontsize (14));
     texpreamble ("\newcommand{\Circles}[1]{\texttt{piirraYmpyrat (#1)}}");

     label ("\Tree [ .{\Circles{5, 400, false}} [ .{\Circles{4, 370, true}} [
         .{\Circles{3, 340, false}} [ .{\Circles{2, 310, true}} [
         .{\Circles{1, 280, false}} [ .{\Circles{0, 250, true}} ] ]
         ] ] ] ]", (0, 0));
   #+END_SRC
   #+END_CENTER
** Rekursio
   #+BEGIN_QUOTE
   /Rekursiossa/ tehtävä tai ongelma ratkaistaan pilkkomalla se
   pienempiin, samanlaisiin tehtäviin. Yllä olevassa esimerkissä
   alkuperäinen tehtävä
   #+BEGIN_CENTER
   piirrä 5 sisäkkäistä ympyrää
   #+END_CENTER
   ratkaistaan piirtämällä ensin uloin ympyrä ja ratkaisemalla sen
   jälkeen /alkuperäisen ongelman kanssa samanlainen mutta pienempi
   ongelma/
   #+BEGIN_CENTER
   piirrä 4 sisäkkäistä ympyrää.
   #+END_CENTER

   /Rekursiivinen funktio/ kutsuu itseään. Jotta rekursio päättyisi
   joskus, funktiossa täytyy olla myös /lopetusehto/. Yllä olevassa
   esimerkissä lopetusehto täyttyy silloin, kun kaikki ympyrät on
   piirretty, eli kun parametrin ~lkm~ arvo on 0.
   #+END_QUOTE
** Esimerkki
   #+BEGIN_SRC processing
     void piirraNeliot (float sivu, boolean valkoinen, int lkm, int nelioita)
     {
       if (valkoinen)
         fill (100);
       else
         fill (0);

       rect (0, 0, sivu, sivu);
       if (lkm == nelioita)
         return;
       else
         piirraNeliot (sivu / 2, !valkoinen, lkm + 1, nelioita);
     }

     void setup ()
     {
       size (600, 600);
       colorMode (HSB, 100);
       background (0);
       noLoop ();
     }

     void draw ()
     {
       piirraNeliot (width / 2.0, true, 1, 10);
     }
   #+END_SRC

** Esimerkki
   #+BEGIN_SRC processing
     void piirraSuorakaiteet (float x, float leveys, int taso, int tasoja)
     {
       float l = leveys / 3; // piirretävän suorakaiteen leveys
       rect (x + l, 0, l, height);
       if (taso == tasoja)
         return;
       else
       {
         int uusiTaso = taso + 1;
         piirraSuorakaiteet (x, l, uusiTaso, tasoja);
         piirraSuorakaiteet (x + 2 * l, l, uusiTaso, tasoja);
       }
     }

     void setup ()
     {
       size (600, 400);
       colorMode (HSB, 100);
       background (0);
       fill (0, 100, 100);
       noLoop ();
     }

     void draw ()
     {
       piirraSuorakaiteet (0, width, 1, 5);
     }
   #+END_SRC
** Esimerkki
   #+BEGIN_SRC processing
     void piirraYmpyrat (float x, float y, float d, int n, int N)
     {
       float r = d / 2;
       ellipse (x - r, y, d, d);
       ellipse (x + r, y, d, d);
       if (n != N)
       {
         piirraYmpyrat (x - r, y, d / 2, n + 1, N);
         piirraYmpyrat (x + r, y, d / 2, n + 1, N);
       }
     }

     void setup ()
     {
       size (600, 600);
       noLoop ();
     }

     void draw ()
     {
       piirraYmpyrat (width / 2.0, height / 2.0, width / 2.0, 0, 5);
     }
   #+END_SRC
   
