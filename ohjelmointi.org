#+COLUMNS: %25ITEM(Aihe) %TUNNIT(Tunteja)
#+HTML_HEAD_EXTRA: <link rel="additional stylesheet" type="text/css" href="ohjelmointi.css" />
#+NAME: asymptote-asetukset
#+BEGIN_SRC asymptote :exports none
  usepackage ("inputenc", "utf8");
  defaultpen (fontsize (14));
#+END_SRC
* Aikataulu
  #+BEGIN: columnview :id global :maxlevel 1
  | Aihe                                                  | Tunteja |
  |-------------------------------------------------------+---------|
  | * Aikataulu                                           |         |
  | * Piirtäminen lausekkeiden avulla <<txt:piirtaminen>> |       2 |
  | * Väri                                                |       1 |
  | * Piirtoikkuna ja koordinaatisto                      |         |
  | * Vakio                                               |         |
  | * Laskulauseke                                        |         |
  | * Lauseke                                             |         |
  | * Muuttuja                                            |         |
  | * Ehdollinen suorittaminen                            |         |
  | * ~while~-silmukka                                    |         |
  | * ~for~-silmukka                                      |         |
  | * Pikseli <<txt:pikseli>>                             |         |
  | * Funktion määritteleminen                            |         |
  | * Animaatio                                           |         |
  | * Aika                                                |         |
  | * Hiiri                                               |         |
  | * Satunnaisuus                                        |         |
  | * Rekursio                                            |         |
  | * Ratkaisut                                           |         |
  #+END:
* Piirtäminen lausekkeiden avulla <<txt:piirtaminen>>
  :PROPERTIES:
  :TUNNIT:   2
  :END:
** Piirtoikkunan pisteen koordinaatit
   
   Processing-ohjelmointikielessä piirretään kuvioita ja animaatioita
   piirtoikkunaan. Piirtoikkunan eri kohtiin eli /pikseleihin/
   viitataan \(x\)- ja \(y\)-koordinaateilla. Esimerkiksi pisteen
   \((70, 40)\) \(x\)-koordinaatti on 70 ja
   \(y\)-koordinaatti 40. Toisin kuin matematiikassa, piirtoikkunassa
   piste \((0, 0)\) on /vasemmassa yläkulmassa/ ja \(y\)-koordinaatin
   arvot kasvavat /alaspäin/. Seuraavaan kuva esittää piirtoikkunaa,
   jonka leveys on 600 ja korkeus 400. Kuvaan on piirretty myös
   kaikkien ikkunan kulmapisteiden koordinaatit sekä pisteiden \((70,
   40)\) ja \((220, 130)\) kohdat.

   
   #+NAME: koordinaatisto
   #+BEGIN_SRC asymptote :exports none :noweb yes :exports none
     <<asymptote-asetukset>>
     int LEVEYS = 600;
     int KORKEUS = 400;
     size (LEVEYS, KORKEUS);
     filldraw (xscale (LEVEYS) * yscale (KORKEUS) * unitsquare, lightgray);
     // muunnos Processing-koordinaatistosta perinteiseen koordinaatistoon
     transform T = shift ((0, 400)) * yscale (-1); 
     real s = -.05 * LEVEYS; // akselien translaatio pois ikkunan reunalta
     draw ("$x$", T * shift ((0, s)) * ((0, 0) -- (LEVEYS, 0)), LeftSide, EndArrow);
     draw ("$y$", T * shift ((2*s, 0)) * ((0, 0) -- (0, KORKEUS)), EndArrow);

   #+END_SRC

   #+NAME: pisteita-koordinaatistossa
   #+BEGIN_SRC asymptote :noweb yes :file pisteita-koordinaatistossa.svg :cache yes
     <<koordinaatisto>>
     pair A = (70, 40);
     pair B = (220, 130);

     for (pair P : new pair[] {A, B})
       dot ((string) P, T * P, NE);
     for (int x : new int[] {0, LEVEYS})
       for (int y : new int[] {0, KORKEUS})
         {
           pair P = (x, y);
           dot ((string) P, T * P, (x == 0 ? W : E));
         }
   #+END_SRC

   #+RESULTS[1b649732bd8bdb1e283014ac1869f9579037accc]: pisteita-koordinaatistossa
   [[file:pisteita-koordinaatistossa.svg]]

   Eräs peruskuvioista on suorakulmio (englanniksi
   /rectangle/). Seuraavassa esimerkissä piirretään suorakulmio
   ikkunaan, jonka koko on $600\times 400$ pikseliä. Piirtoikkuna on
   väriltään harmaa, ja piirretyssä valkoisessa suorakulmiossa on
   musta reunus.
   #+NAME: piirtaminen-suorakulmio
   #+BEGIN_SRC processing :exports both
     size (600, 400);
     rect (70, 40, 150, 90);
   #+END_SRC

   Lauseke ~size (600, 400);~ avaa piirtoikkunan, jonka leveys on 600
   pikseliä ja korkeus 400 pikseliä. Lauseke ~rect (70, 40, 150, 90);~
   piirtää suorakaiteen, jonka vasen yläkulma on kohdassa \((70, 40)\)
   ja jonka leveys on 150 ja korkeus 90. Koska suorakaiteen yläkulman
   \(x\)-koordinaatin ja leveyden summa on \[ 70 + 150 = 220, \] ja
   yläkulman \(y\)-koordinaatin ja korkeuden summa on \[ 40 + 90 =
   130, \] suorakaiteen oikea alakulma on samassa kohdassa kuin yllä
   olevaan kuvaan piirretty piste \((220, 130)\).

   Tarkalleen ottaen pikselit ovat pieniä neliöitä, mikä vaikuttaa
   hieman oikean alakulman tarkkoihin koordinaatteihin. Tähän palataan
   kappaleessa [[txt:pikseli]].
** Ohjelmarivin muoto
   Tietokoneohjelma koostuu tyypillisesti /ohjelmariveistä/, joita
   edellä olevasta ohjelmasta löytyy kaksi. Processing-ohjelma on
   hyvin tarkka monista ohjelmarivin yksityiskohdista. Jotkut asiat
   ohjelmoija voi itse päättää.

   Edellä olevasta ohjelmasta voidaan jättää pois kaikki tyhjä tila
   eli välilyönnit, ja ohjelma toimii silti samalla
   tavalla. Välilyöntien käyttäminen on siis tyylikysymys. Myös tyhjiä
   rivejä voidaan lisätä ohjelmaan huoletta.
   
   #+BEGIN_SRC processing :exports both
     size(600,400);

     rect(70,40,150,90);
   #+END_SRC

   Monet muutokset johtavat siihen, että ohjelma ei joko toimi tai
   lopputulos muuttuu. Ennen kaikkea
   - ohjelmarivin lopussa täytyy olla puolipiste eli ~;~
   - sanat ~size~ ja ~rect~ täytyy kirjoittaa pienillä kirjaimilla
   - sulkujen ~()~ täytyy olla tavalliset sulut, ei esimerkiksi
     aaltosulut ~{}~ tai hakasulut ~[]~
   - sulkujen sisällä olevien lukujen täytyy olla eroteltuina
     toisistaan pilkuilla.

   Kokeile tehdä muutoksia riveihin ja katso, mitä tapahtuu kun yrität
   suorittaa ohjelman.
** Muita kuvioita
   Suorakaiteen piirtämiseen käytetään yllä /funktiota/
   ~rect()~. Funktioiden nimiin viitataan usein laittamalla sulut
   nimen perään, jotta tiedetään kyseeessä olevan nimenomaan
   funktio. Tällöin sulkujen sisältö jätetään yksinkertaisuuden vuoksi
   monesti tyhjäksi.

   Funktio ~rect()~ piirtää suorakaiteen, jonka sivut ovat
   piirtoikkunan sivujen suuntaiset. Muunlaisia nelikulmioita voidaan
   piirtää funktiolla ~quad()~, jonka nimi tulee englannin kielen
   nelikulmiota tarkoittavasta sanasta /quadrilateral/. Tällöin
   sulkujen sisään laitetaan kaikkien neljän pisteen koordinaatit
   järjestyksessä joko myötä- tai vastapäivään kuviota
   kiertäen. Seuraavassa esimerkissä piirretään nelikulmio, jonka
   kärkipisteet ovat myötäpäivään kiertäen \((70, 40)\), \((220, 40)\),
   \((220, 130)\) sekä \((70, 130)\). Lopputuloksena saadaan
   samankaltainen suorakulmio kuin edellisessä esimerkissä.
   
   #+BEGIN_SRC processing :exports both
     size (600, 400);
     quad (70, 40, 220, 40, 220, 130, 70, 130);
   #+END_SRC

   Kolmioita voidaan piirtää vastaavalla funktiolla ~triangle()~ jolle
   annetaan kolmen kärkipisteen koordinaatit. 

   Mikäli kuvioita piirretään useampia, seuraava piirretään edellisen
   päälle. Seuraavissa esimerkeissä vain piirtokomentojen järjestys on
   vaihdettu.

   #+BEGIN_SRC processing :exports both
     size (600, 400);
     triangle (50, 50, 50, 350, 350, 350);
     quad (50, 200, 200, 350, 350, 200, 200, 50);
   #+END_SRC

   #+BEGIN_SRC processing :exports both
     size (600, 400);
     quad (50, 200, 200, 350, 350, 200, 200, 50);
     triangle (50, 50, 50, 350, 350, 350);
   #+END_SRC
** Kuvion suunnitteleminen
   Kuvioiden kärkipisteiden koordinaatit kannattaa usein suunnitella
   kynällä ja paperilla ennen kuvan piirtämistä
   tietokoneella. Esimerkiksi yllä oleva kahden kuvion kuva
   suunniteltiin seuraavasti. Tavoitteena oli piirtää kuvan kaltainen
   kuvio, jossa on 
   - suorakulmainen tasakylkinen kolmio sekä
   - neliö, jonka kaksi kärkipistettä ovat kolmion kylkien
     keskikohdissa.
   Kolmion yhdeksi pisteeksi valittiin $(50, 50)$ ja kylkien
   pituudeksi 300.

   Suunnittelu voidaan yleensä tehdä useammalla eri tavalla. Tässä
   tapauksessa kärkipisteet voidaan etsiä vaikkapa seuraavasti alla
   olevan kuvan mukaisesti.
   1. Piste \(A (50, 50)\) on annettu.
   2. Pisteellä $B$ on sama \(x\)-koordinaatti kuin pisteellä \(A.\)
      Koska kolmion kyljen pituus on 300 ja \(y\)-akselin arvot
      kasvavat alaspäin, pisteen $B$ \(y\)-koordinaatti on 300
      yksikköä suurempi kuin pisteen \(A\). Niinpä \(B(50, 350).\)
   3. Pisteillä $B$ ja $C$ on sama \(y\)-koordinaatti, mutta pisteen
      \(C\) \(x\)-koordinaatti on 300 suurempi. Täten \(C(350, 350).\)
   4. Piste \(D\) on pisteiden $A$ ja $B$ puolivälissä, joten \(D(50,
      200).\) Vastaavasti \(E\) on pisteiden $B$ ja $C$ puolivälissä,
      jolloin \(E(200, 350).\)
   5. Koska $DEFG$ on neliö, pisteellä $F$ on sama \(x\)-koordinaatti
      kuin pisteellä $C$ ja sama \(y\)-koordinaatti kuin pisteellä
      \(D,\) joten \(F(350, 200).\)
   6. Vastaavasti pisteellä $G$ on on sama \(x\)-koordinaatti kuin
      pisteellä $E$ ja sama \(y\)-koordinaatti kuin pisteellä \(A,\)
      joten \(G(200, 50).\)
    
   #+BEGIN_SRC asymptote :file kolmio-nelio.svg :noweb yes :cache yes
     <<koordinaatisto>>
     pair A = (50, 50);
     int s = 300; // sivun pituus
     pair B = shift ((0, s)) * A;
     pair C = shift ((s, 0)) * B;

     draw (T * (A -- B -- C -- cycle), dashed);
     pair D = midpoint (A -- B);
     pair Ep = midpoint (B -- C);
     pair F = (C.x, D.y);
     pair G = (Ep.x, A.y);
     draw (T * (D -- Ep -- F -- G -- cycle), dashed);
     pair[] points = {A, B, C, D, Ep, F, G};
     string[] labels = {"$A$", "$B$", "$C$", "$D$", "$E$", "$F$", "$G$"};
     for (int i = 0; i < points.length; ++i)
       {
         pair P = points [i];
         dot (labels [i] + (string) P, T * P, (P.y == A.x + s ? S : E));
       }
   #+END_SRC

   #+RESULTS[7ef1d97d2b913d57b2c0eedfb923a272bbecd591]:
   [[file:kolmio-nelio.svg]]

** Tehtävät
  1. Piirrä \(800\times 600\)-kokoiseen piirtoikkunaan 
     a) nelikulmio, jonka vasen yläkulma on pisteessä \((160, 90)\) ja
        jonka leveys on 200 ja korkeus 300
     b) kolmio, jonka kärkipisteet ovat \((110, 500)\), \((370, 420)\)
        sekä \((480, 570)\)
     c) nelikulmio, jonka kärkipisteet ovat vastapäivään kiertäen
        lueteltuina \((730, 50)\), \((450, 370)\), \((770, 530)\)
        sekä \((610, 250)\).
  2. Piirrä seuraavanlaiset kuvat. Piirtoikkunan koko on \(200\times 200.\)
     a) 
	#+NAME: piirtaminen-kolmio
	#+BEGIN_SRC processing
          size (200, 200);
          triangle (0, 100, 0, 200, 200, 0);
	#+END_SRC
     b) 
	#+NAME: piirtaminen-raidat
	#+BEGIN_SRC processing
          size (200, 200);
          quad (0, 0, 200, 200, 200, 100, 100, 0);
          triangle (0, 100, 0, 200, 100, 200);
	#+END_SRC
     c) 
	#+NAME: piirtaminen-neliot
	#+BEGIN_SRC processing
          size (200, 200);
          quad (0, 100, 100, 200, 200, 100, 100, 0);
          rect (50, 50, 100, 100);
	#+END_SRC
  3. Piirrä haluamasi kokoiseen piirtoikkunaan valitsemasi kokoinen
     a) puolisuunnikas
     b) tasakylkinen kolmio, joka ei ole suorakulmainen
     c) suunnikas, joka ei ole suorakulmio.
  4. Piirrä seuraavat kuviot. Piirtoikkunan koko on \(300\times 200.\)
     a) Suorakaide on piirtoikkunan keskellä, ja suorakaiteen leveys
        ja korkeus ovat puolet piirtoikkunan vastaavista mitoista.
	#+NAME: piirtaminen-suorakaide-keskella
	#+BEGIN_SRC processing
          size (300, 200);
          rect (75, 50, 150, 100);
	#+END_SRC
     b) Ulomman suunnikkaan kaksi kärkipistettä jakavat piirtoikkunan
        pidemmät sivut suhteessa \(1:2.\) Sisemmän suunnikkaan
        kärkipisteet ovat ulomman suunnikkaan sivujen keskipisteitä.
	#+NAME: piirtaminen-sisakkaiset-suunnikkaat
	#+BEGIN_SRC processing
          size (300, 200);
          quad (100, 0, 300, 100, 200, 200, 0, 100);
          quad (50, 50, 200, 50, 250, 150, 100, 150);
	#+END_SRC
  5. Piirrä haluamasi näköiset ja kokoiset versiot isoista kirjaimista
     T, X, A, B sekä Q. Alla esimerkkinä yksi versio
     A-kirjaimesta.
     #+BEGIN_SRC processing
       size (300, 200);
       rect (75, 100, 150, 30);
       quad (250, 200, 300, 200, 175, 0, 125, 0);
       quad (0, 200, 50, 200, 175, 0, 125, 0);
     #+END_SRC
  6. Tämän tehtävän voit tehdä vain, mikäli olet jo opiskellut
     /Pythagoraan lauseen/. Piirrä tasasivuinen kolmio, jonka sivun
     pituus on 120. Piirrä kolmio \(300\times 300\)-kokoisen
     piirtoikkunan keskelle siten, että kolmion sivuille jää yhtä
     paljon tilaa ja myös ylä- ja alapuolelle jää yhtä paljon
     tilaa. Voit pyöristää laskujesi tuloksina saamasi koordinaatit
     kokonaisluvuiksi.
* Kommentteja ja värejä <<txt:kommentteja-vareja>>
  :PROPERTIES:
  :TUNNIT:   1
  :END:
** Kommentti ohjelmakoodissa
   Tietokoneohjelmiin kirjoitetaan usein /kommentteja/, jotka ovat
   ohjelman ihmislukijalle tarkoitettuja selvennyksiä. Tietokone
   jättää kommentit huomiotta ohjelman suorituksessa.

   Processing-ohjelmointikielessä yksi tapa kirjoittaa kommentteja on
   kahden kauttaviivan ~//~ avulla. Tietokone jättää huomiotta kahta
   kauttaviivaa seuraavan tekstin rivin loppuun asti. Alla on
   esimerkki kommenttien käytöstä.

   #+BEGIN_SRC processing :exports both
     size (500, 500); // asetetaan piirtoikkunan koko

     // piirretään ristin muotoinen kuvio kahden suorakaiteen avulla
     // keskelle piirtoikkunaa
     rect (200, 100, 100, 300);
     rect (100, 200, 300, 100);
   #+END_SRC
** Väreillä piirtäminen
   Värikynillä paperille piirrettäessä valitaan ensin, minkä värisellä
   kynällä piirretään. Samaan tapaan Processing-ohjelmointikielessä
   valitaan ennen piirtämistä, millä värillä piirretään. Samalla
   värillä piirretään kunnes valitaan toinen piirtoväri.

   Processing-ohjelmointikielessä on yli 16 miljoonaa eri väristä
   \ldquo{}piirtokynää\rdquo{}. Niitä ei enää kannata yrittää nimetä,
   vaan eri väreihin viitataan luvuilla. Tietty väri voidaan valita
   muutamalla eri tavalla. Ihmisen kannalta näistä helpoiten
   tulkittava tapa on värin valitseminen /värisävyn/ (englanniksi
   /hue/), /värikylläisyyden/ (englanniksi /saturation/) ja /värin
   kirkkauden/ (englanniksi /brightness/) avulla. Englanninkielisistä
   sanoista tulee tämän /värimallin/ nimi HSB. 

   #+NAME: hsb-koodaus-havainnollistus 
   #+BEGIN_SRC asymptote :exports none
     <<asymptote-asetukset>>
     settings.render = 2;
     settings.antialias = 4;

     import graph;

     size (15cm, 0);
     int LEVEYS = 100, KORKEUS = 20;
     int KOMPONENTTI_LAATIKOT_N = 100;

     triple valittuVari = (17, 60, 75) / 100.0;

     typedef pen VariFunktio (real);

     void hsbKoodausHavainnollistus (real komponenttiMax,
                                     string komponenttiNimi,
                                     VariFunktio f,
				     real valittuArvoOsuutenaMax)
     {
       real komponenttiAskel = ((real) komponenttiMax) / KOMPONENTTI_LAATIKOT_N;
       real laatikonLeveys = ((real) LEVEYS) / KOMPONENTTI_LAATIKOT_N;

       for (int l = 0;  l < KOMPONENTTI_LAATIKOT_N; ++l)
         {
           real vasenReuna = l * laatikonLeveys;
           path alue = shift ((vasenReuna, 0)) * xscale (laatikonLeveys)
             * yscale (KORKEUS) * unitsquare;
           pair vasenAlakulma = min (alue);
           pair oikeaYlakulma = max (alue);
           axialshade (alue,
                       f (l * komponenttiAskel),
                       vasenAlakulma,
                       f ((l + 1) * komponenttiAskel),
                       (oikeaYlakulma.x, vasenAlakulma.y));
         }
  
       xaxis (komponenttiNimi, xmin = 0, xmax = 100, RightTicks);
       draw (shift ((valittuArvoOsuutenaMax * LEVEYS, 0)) 
             * ((0, 0) -- (0, KORKEUS)), dashed);
     }
   #+END_SRC

   #+RESULTS: hsb-koodaus-havainnollistus

   # Huom. Nämä esitetään png-tiedostoina, koska svg-formaatissa
   # laatikkojen väliin piirtyy pieniä valkoisia viivoja.

   Otetaan nyt jokin väri piirtämistä varten valitsemalla värisävy,
   kirkkaus ja värikylläisyys.
   1. Värisävy on jokin luku nollan ja sadan väliltä. Seuraava kuva
      esittää, mikä värisävy saadaan milläkin luvulla. Kaikissa tämän
      kuvan väreissä on suurin mahdollinen kirkkaus ja värikylläisyys.

      #+NAME: varisavy
      #+BEGIN_SRC asymptote :file varisavy.png :cache yes :noweb yes
        <<hsb-koodaus-havainnollistus>>
        pen f (real h) { return (hsv (h, 1, 1)); }
        hsbKoodausHavainnollistus (360, "värisävy", f, valittuVari.x);
      #+END_SRC

      #+RESULTS[2b8aff37fd2338def47e713e557526dc157e2bf9]: varisavy
      [[file:varisavy.png]]

      Valitaanpa värisävyksi 17, joka antaa keltavihreän värin. Tämä
      on merkattu kuvaan katkoviivalla.

   2. Valitaan seuraavaksi värin kirkkaus. Kirkkaus kertoo sen, kuinka
      valoisa väri on. Tässä myös kirkkaus on jokin luku nollan ja
      sadan väliltä. Eri kirkkauksilla saadaan seuraavat värit;
      kaikissa tämän kuvan väreissä on suurin mahdollinen
      värikylläisyys.

      #+NAME: kirkkaus
      #+BEGIN_SRC asymptote :file kirkkaus.png :cache yes :noweb yes
        <<hsb-koodaus-havainnollistus>>
        pen f (real v) { return (hsv (valittuVari.x * 360, 1, v)); }
        hsbKoodausHavainnollistus (1, "kirkkaus", f, valittuVari.z);
      #+END_SRC

      #+RESULTS[1fcaaf3252b6b33e8da029ad871ba6a0a6405ba2]: kirkkaus
      [[file:kirkkaus.png]]

      Valitaan värisävyn 17 lisäksi kirkkaus 75 (kuvassa
      katkoviivalla).

   3. Vielä voidaan valita värikylläisyys joka kertoo sen, kuinka
      räikeä väri on. Alla myös värikylläisyys on jokin luku nollan ja
      sadan väliltä. Eri värikylläisyyksillä saadaan seuraavat värit.
   
      #+NAME: varikyllaisyys
      #+BEGIN_SRC asymptote :file varikyllaisyys.png :cache yes :noweb yes
        <<hsb-koodaus-havainnollistus>>
        pen f (real s) { return (hsv (valittuVari.x * 360, s, valittuVari.z)); }
        hsbKoodausHavainnollistus (1, "värikylläisyys", f, valittuVari.y);
      #+END_SRC

      #+RESULTS[1e09b08150ea8e0910c45e7d82614331e5d1242f]: varikyllaisyys
      [[file:varikyllaisyys.png]]

      Valitaan värikylläisyydeksi 60 (kuvassa katkoviivalla). 

   Kirkkaus valittiin yllä ennen kylläisyyttä, mutta
   Processing-ohjelmointikielessä värin tiedot annetaan järjestyksessä
   sävy 17, kylläisyys 60 ja kirkkaus 75. Processing-kielessä
   suorakaiteen täyttäminen edellä valitsemallamme värillä tapahtuu
   seuraavasti. HSB-värimallin valinta tapahtuu funktiolla
   ~colorMode()~, ja suorakaiteen täyttämisessä käytetyn värin
   valitseminen funktiolla ~fill()~.

   #+BEGIN_SRC processing :exports both
     size (600, 400);

     // valitaan HSB-värimalli, värien ominaisuuksien suurimmiksi arvoiksi
     // asetetaan 100
     colorMode (HSB, 100); 

     // valitaan täyttöväriksi väri, jonka sävy on 17, kylläisyys 60 ja
     // kirkkaus 75.
     fill (17, 60, 75);

     // piirretään suorakulmio
     rect (50, 50, 300, 300);
   #+END_SRC

   Myös muita värejä kuin täyttöväri voidaan asettaa. Viivojen
   piirtoväriä säädetään funktiolla ~stroke()~, ja koko piirtoikkunan
   taustaväriä funktiolla ~background()~. Seuraavassa on esimerkki
   näistä.

   #+BEGIN_SRC processing :exports both
     size (600, 400);
     colorMode (HSB, 100);

     // täyttöväri räikeä ja kirkas sininen
     fill (67, 100, 100); 

     // tausta samalla sävyllä, mutta vähemmän kylläisellä ja tummemmalla
     background (67, 50, 50); 

     // viivat kirkkaalla punaisella
     stroke (0, 100, 100); 

     rect (100, 100, 400, 200);
   #+END_SRC

   Musta ja valkoinen ovat usein käytettyjä värejä. Niille voidaan
   käyttää väriasetusfunktioiden lyhyempiä versioita, joilla annetaan
   vain yksi luku. Tällöin mustaa vastaa luku 0 ja valkoista luku 100,
   ja välillä olevat luvut antavat eri harmaan sävyjä. Kuvioiden
   ääriviivat voidaan jättää pois funktion ~noStroke()~
   avulla. Viivojen piirtäminen saadaan takaisin funktion ~stroke()~
   avulla. Tässä esimerkki, jossa käytetään näitä ominaisuuksia.
   #+BEGIN_SRC processing :exports both
     size (600, 400);
     colorMode (HSB, 100);
     background (17, 30, 50); // tausta
     noStroke (); // kuvioiden ääriviivat pois
     fill (100); // täytetään valkoisella
     rect (100, 100, 100, 100); // valkoinen suorakaide, ei ääriviivaa

     fill (0); // uudeksi täyttöväriksi musta
     stroke (10, 100, 100); // piirretään viivat, oransseina
     triangle (300, 200, 500, 350, 250, 50); // musta kolmio, oranssi ääriviiva
   #+END_SRC
** Esimerkki
   Alla on esimerkki yksinkertaisesta kuvasta. Kuvien piirtäminen
   ohjelmallisesti näin yksinkertaisin menetelmin vaatii paljon työtä
   ja on aikaavievää. Sen takia tehtävissä piirretään pääosin hyvin
   yksinkertaisia kuvia.
   #+BEGIN_SRC processing :exports both
     size (600, 400);
     colorMode (HSB, 100);

     noStroke (); // ei piirretä ääriviivoja

     background (65, 30, 90); // sininen taivas taustana

     // nurmikko
     fill (33, 80, 50); // vihreä väri
     rect (0, 250, 600, 150);

     // talo
     fill (5, 50, 90); // rakennuksen väri
     rect (100, 150, 100, 150); // rakennus
     // ikkunat
     fill (65, 100, 50); // ikkunoiden väri
     rect (120, 170, 20, 20);
     rect (120, 210, 20, 20);
     rect (160, 170, 20, 20);
     rect (160, 210, 20, 20);

     // puu
     fill (3, 92, 24); // rungon väri
     rect (400, 240, 10, 10); // runko
     fill (33, 70, 20); // havujen väri
     triangle (380, 240, 430, 240, 405, 220); // alaoksat
     triangle (385, 230, 425, 230, 405, 210); // latva
   #+END_SRC
** Miten HSB-arvoja löytää?
   HSB-arvoja nimitetään myös HSV-arvoiksi. Alla olevalta sivulta saa
   HSV-arvoja nimetyille väreille viemällä hiiren osoittimen värin
   päälle.

   #+BEGIN_QUOTE
   https://en.wikipedia.org/wiki/List_of_colors_(compact)
   #+END_QUOTE

   Sivuilta saaduissa arvoissa on yksi merkittävä ero: niissä
   värisävyn arvo eli \(H\)-arvo on lukujen 0 ja 360 välillä.  Tämän
   arvon voi muuttaa lukujen 0 ja 100 välille lausekkeella \[
   \frac{H}{360}\cdot 100. \]

   Sivulta löytyvät esimerkiksi värille \ldquo{}Turquoise
   green\rdquo{} arvot \((142, 25, 84).\) Tällöin lukujen 0 ja 100
   välillä oleva sävyarvo on \[ \frac{142}{360}\cdot 100
   \approx 39. \] Näillä arvoilla saadaan seuraavanlainen väri.

   #+BEGIN_SRC processing :exports both
     size (100, 100);
     colorMode (HSB, 100);
     background (39, 25, 84);
   #+END_SRC
** Tehtävät
   1. Piirrä keskelle \((600\times 400)\)-kokoista piirtoikkunaa
      \((400\times 200)\)-kokoinen suorakulmio. Taustan värin
      HSB-arvojen tulee olla \((9, 45, 76)\) ja suorakulmion \((54,
      100, 100)\). Suorakulmiolla ei ole reunusta. [Muista asettaa
      ~colorMode (HSB, 100);~]
   2. Piirrä punainen neliö siniselle pohjalle. Neliöllä tulee olla
      vihreä reunus. Kuvioiden koot ja tarkat värit voit valita itse.
   3. Piirrä alla olevan kaltainen kuvio. Taustan HSB-väriarvot ovat
      \((96, 83, 67\)), suorakaiteen \((56, 100, 73)\) ja kolmion
      \((45, 51, 51).\) Suorakaiteella ei ole reunusta, kun taas
      kolmiolla on valkoinen reunus. Kolmion tulee olla osittain
      suorakaiteen päällä. Muuten voit valita kuvioiden mitat
      vapaasti.
      #+NAME: vari-suorakulmio-kolmio
      #+BEGIN_SRC processing
        size (300, 200);
        colorMode (HSB, 100);
        background (96, 83, 67);

        // suorakaide
        noStroke ();
        fill (56, 100, 73);
        rect (50, 50, 100, 100);

        // kolmio
        stroke (100); // valkoinen reunus
        fill (45, 51, 51);
        triangle (100, 150, 250, 100, 150, 20);
      #+END_SRC
   4. Tässä tehtävässä piirtoikkunan taustavärin HSB-arvot ovat \((44,
      66, 71).\) Millään piirretyllä kuviolla ei ole reunaa. Voit
      valita kuvioiden mitat vapaasti.
      a) Piirrä ikkunan sisälle kaksi suorakaidetta, joilla on sama
         värisävy ja värikylläisyys kuin taustalla. Toisen
         suorakaiteen kirkkaus on 25 yksikköä suurempi kuin taustan,
         toisen 25 yksikköä pienempi kuin taustan.

      b) Piirrä ikkunan sisälle kaksi kolmiota, joilla on sama
         värisävy ja kirkkaus kuin taustalla. Toisen kolmion
         värikylläisyys on 30 yksikköä suurempi kuin taustan, toisen
         30 yksikköä pienempi kuin taustan.
   5. Piirrä alla oleva kuva. Piirtoikkunan koko on \((400\times
      400).\) Keltaisen värin HSB-arvot ovat \((13, 62, 98).\) 
      #+NAME: vari-tiikeri
      #+BEGIN_SRC processing
        size (400, 400);
        colorMode (HSB, 100);
        noStroke ();
        background (13, 62, 98); // taustaväri keltainen
	
	// mustat osat
        fill (0);
        quad (0, 400, 100, 0, 200, 0, 100, 400);
        triangle (300, 400, 400, 400, 400, 0);
	
	// valkoinen osa
        fill (100);
        quad (200, 0, 100, 400, 200, 400, 300, 0);
      #+END_SRC
   6. Piirrä haluamasi kokoinen Ahvenanmaan lippu. Selvitä tarvittavat
      mitat ja värien tiedot. Voit pyöristää laskuissa saamasi
      tulokset kokonaisluvuiksi Processing-ohjelmaa varten.

      #+NAME: vari-ahvenanmaan-lippu
      #+BEGIN_SRC processing :exports results
        size (520, 340);
        colorMode (HSB, 100);
        noStroke ();

        background (59, 100, 49); // sininen tausta

	// keltaiset viivat (joiden päälle piirretään punaiset)
        fill (14, 100, 100);
        rect (160, 0, 100, 340);
	rect (0, 120, 520, 100);

	// punaiset viivat
        fill (0, 100, 94);
        rect (190, 0, 40, 340);
	rect (0, 150, 520, 40);
      #+END_SRC
* Kokonaislukuvakio <<txt:kokonaislukuvakio>>
** Vakio
   Edellisessä kappaleissa kaikki koordinaatit on laskettu käsin ennen
   kuvien piirtämisessä. Yleensä ohjelmoinnissa ei tehdä näin, vaan
   koordinaatit lasketaan ohjelmassa annetuista tiedoista. Annetut
   tiedot voidaan tallentaa /vakioihin/.

   #+BEGIN_QUOTE
   Tietokoneohjelman /vakio/ on nimetty muistipaikka, johon voidaan
   tallentaa mm. lukuja. Vakion arvo ei muutu ohjelman suorituksen
   aikana.
   #+END_QUOTE

   Alla olevassa esimerkissä määritellään kokonaislukuvakio ~SIVU~,
   jonka arvoksi asetetaan 128. Kokonaisluku on ohjelmassa ~int~
   (kokonaislukua tarkoittavasta sanasta /integer/) ja vakio ~final~
   (\ldquo{}lopullinen\rdquo{}). Kahden luvun tulo lasketaan
   ohjelmassa /kertolukuoperaattorin/ ~*~ avulla. Ohjelma piirtää
   kolme neliötä, joiden sivun pituus on ~SIVU~. Vierekkäiset neliöt
   koskevat toisiinsa yhdessä kulmapisteessä.

   #+NAME: nelioita-vakiolla-runko
   #+BEGIN_SRC processing :exports none
     colorMode (HSB, 100);
     background (59, 21, 87);
     fill (58, 98, 59);

     rect (0, 0, SIVU, SIVU); // neliö ikkunan vasemmassa yläkulmassa
     rect (SIVU, SIVU, SIVU, SIVU); // toinen neliö koskettaa ensimmäistä
     rect (2 * SIVU, 2 * SIVU, SIVU, SIVU); // kolmas koskettaa toista
   #+END_SRC

   #+BEGIN_SRC processing :exports both :noweb yes
     size (600, 400);
     final int SIVU = 128; // kokonaislukuvakio

     <<nelioita-vakiolla-runko>>
   #+END_SRC

   Verrataan ohjelmaa toiseen, jossa ei käytetä vakioita. Ohjelma
   piirtää saman kuvan.

   #+BEGIN_SRC processing :exports code
     size (600, 400);

     colorMode (HSB, 100);
     background (59, 21, 87);
     fill (58, 98, 59);

     rect (0, 0, 128, 128);
     rect (128, 128, 128, 128);
     rect (256, 256, 128, 128);
   #+END_SRC

   Jo näin pienessä ohjelmassa vakion käytöllä on useita hyviä puolia.
   - Ensimmäisestä ohjelmakoodista nähdään /heti/, että
     - ohjelmassa esiintyvä luku 128 on nimenomaan neliön sivun pituus
     - kaikki suorakulmiot ovat neliöitä ja että niillä kaikilla on sama
       sivun pituus
     - toisen neliön vasen yläkulma on tarkoituksellisesti
       koordinaateissa ~(SIVU, SIVU)~
     - kolmannen neliön vasen yläkulma on tarkoituksellisesti
       koordinaateissa ~(2 * SIVU, 2 * SIVU)~.
   - Kolmannen neliön koordinaatit lasketaan ohjelmassa automaattisesti.
     
   Eikä siinä vielä kaikki. Kuvitellaanpa, että haluamme muuttaa
   neliön sivun pituutta. Ohjelman ensimmäisessä versiossa tarvitsee
   muuttaa vain yhtä lukua ohjelmassa, ja kaikki muut arvot muuttuvat
   automaattisesti.

   #+BEGIN_SRC processing :exports both :noweb yes
     size (600, 400);
     final int SIVU = 87; // sivun pituus muuttuu

     <<nelioita-vakiolla-runko>>
   #+END_SRC
   
   Toisessa versioissa täytyisi muuttaa kaikkia nollasta poikkeavia
   koordinaatteja. 

   #+BEGIN_QUOTE
   Jos jotain lukua käytetään ohjelmassa useassa kohdassa, luku
   määritellään yleensä vakiona. Myös vain yhdessä kohdassa käytetty
   luku on usein hyvä määrittää vakiona, koska näin annetaan
   ohjelmakoodin lukijalle selitys sekä luvun arvolle että
   merkitykselle.
   #+END_QUOTE

   Monet ohjelmoijat kirjoittavat vakioiden nimet isoilla kirjaimilla
   erottaakseen ne /muuttujista/, joista myöhemmin lisää. Sillä onko
   vakion nimi kirjoitettu isoilla vai pienillä kirjamilla ei ole
   merkitystä, kunhan nimi kirjoitetaan koko ajan samalla tavalla.

   #+BEGIN_QUOTE
   Vakion nimi on yksi sana, ja se täytyy kirjoittaa koko ajan samalla
   tavalla. Isoja kirjaimia ei voi vaihtaa pieniin tai toisin
   päin. Vakion nimessä voi käyttää kirjaimia ~a-z~, ~A-Z~, numeroita
   ~0-9~ sekä alaviivaa ~_~. Vakion nimi ei voi alkaa numerolla.

   Jotkut sanat ovat ohjelmointikielen /varattuna sanoja/, eikä niitä
   voi käyttää vakioiden niminä. Tällaisia ovat mm. ~int~ sekä
   ~final~.
   #+END_QUOTE
** Laskutoimituksia kokonaislukuvakioilla
   Processing-ohjelmointikielessä kerto-, yhteen- ja vähennyslaskuun
   käytetyt merkit ovat seuraavat.
   | laskutoimitus | merkki |
   |---------------+--------|
   | kertolasku    | ~*~    |
   | yhteenlasku   | ~+~    |
   | vähennyslasku | ~-~    |

   Processing tuntee laskujärjestyksen. Sulkuja voidaan tarvittaessa
   käyttää ryhmittelyssä. Vakioiden avulla voidaan laskea toisia
   vakioita. Tästä esimerkki seuraavassa. Esimerkissä piirretään
   vierekkäin kolme suorakulmiota, joiden leveyden ja korkeuden suhde
   on \(1 : 2.\) Suorakulmioiden väliin jäteteään aina tilaa 10
   yksikön verran. Leveyttä ja väliä voidaan säätää vakioiden avulla.

   #+BEGIN_SRC processing :exports both
        size (600, 400);
        final int LEVEYS = 80;
        final int VALI = 10;

	// vakio korkeus lasketaan leveydestä
	final int KORKEUS = 2 * LEVEYS;

	rect (0, 0, LEVEYS, KORKEUS);
	rect (LEVEYS + VALI, 0, LEVEYS, KORKEUS);
	rect (2 * (LEVEYS + VALI), 0, LEVEYS, KORKEUS);
   #+END_SRC

   #+BEGIN_QUOTE
   Ohjelmakoodissa vakion arvo voidaan laskea toisista vakioista
   vakion määrittelevällä rivillä.
   #+END_QUOTE

** Esimerkki
   Tässä esimerkissä piirretään valkoiselle pohjalle kolmesta
   kolmiosta koostuva suunnikas. Seuraavat vakiot määrittävät kuvion
   mitat.
   - ~KANTA~ on suunnikkaan kannan pituus ja ~KORKEUS~ suunnikkaan
     korkeus
   - ~VASEN_YLAKULMA_X~ on suunnikkaan vasemman yläkulman
     \(x\)-koordinaatti; \(y\)-koordinaatti on aina 0 (vasemman
     alakulman \(x\)-koordinaatti on aina 0)
   Nämä vakiot puolestaan määrittävät kolmioiden värit.
   - ~SAVY~ on kaikkien kolmioiden värisävy
   - ~KYLLAISYYS_SUURIN~ on räikeimmän kolmion värikylläisyys
   - ~KIRKKAUS_SUURIN~ on räikeimmän kolmion kirkkaus
   - ~VARIARVO_LASKU~ on se arvo, jolla sekä kylläisyys että kirkkaus
     vähenevät kolmiosta toiseen.

   Ohjelmassa tarvitaan kahteen kertaan suunnikkaan oikean yläkulman
   \(x\)-koordinaattia. Se voidaan laskea vasemman yläkulman
   \(x\)-koordinaatista ja suunnikkaan leveydestä.

   Ohjelmakoodissa pienet kolmiot piirretään ensin suurempina, koska
   se on helpompaa kuin suunnikkaan keskipisteet laskeminen. Isoin
   kolmio piirretään osittain toisten kolmioiden päälle.
   
   #+NAME: suunnikas-vakioilla-runko
   #+BEGIN_SRC processing :exports none
     // lasketaan oikean yläkulman x-koordinaatti ja tallennetaan se
     // vakioon
     final int OIKEA_YLAKULMA_X = KANTA + VASEN_YLAKULMA_X;

     colorMode (HSB, 100);
     noStroke ();
     background (100);

     // räikein ja kirkkain kolmio
     fill (SAVY,  KYLLAISYYS_SUURIN, KIRKKAUS_SUURIN);
     triangle (0, KORKEUS, KANTA, KORKEUS, OIKEA_YLAKULMA_X, 0);

     // toiseksi räikein ja kirkkain kolmio
     fill (SAVY,
           KYLLAISYYS_SUURIN - VARIARVO_LASKU,
           KIRKKAUS_SUURIN - VARIARVO_LASKU);
     triangle (VASEN_YLAKULMA_X, 0, 0, KORKEUS, KANTA, KORKEUS);

     // suurin, harmain ja tummin kolmio
     fill (SAVY, 
           KYLLAISYYS_SUURIN - 2 * VARIARVO_LASKU,
           KIRKKAUS_SUURIN - 2 * VARIARVO_LASKU);
     triangle (0, KORKEUS, OIKEA_YLAKULMA_X, 0, VASEN_YLAKULMA_X, 0);
   #+END_SRC


   #+BEGIN_SRC processing :exports both :noweb yes
     size (600, 400);

     // kuvion mitat määrittävät vakiot
     final int KANTA = 250; // suunnikkaan leveys
     final int KORKEUS = 330; // suunnikkaan korkeus
     // suunnikkaan vasemman yläkulman x-koordinaatti
     final int VASEN_YLAKULMA_X = 150;

     // väreihin liittyvät vakiot
     final int SAVY = 55; // värien värisävy
     final int KYLLAISYYS_SUURIN = 70; // räikeimmän värin kylläisyys
     final int KIRKKAUS_SUURIN = 50; // vaaleimman värin kirkkaus
     // kylläisyys ja kirkkaus vähenevät alueesta toiseen näin paljon
     final int VARIARVO_LASKU = 10; 

     <<suunnikas-vakioilla-runko>>
   #+END_SRC

   Pelkästään vakioiden arvoja muuttamalla voidaan samalla
   ohjelmakoodilla piirtää seuraavanlainen kuvio.

   #+BEGIN_SRC processing :exports both :noweb yes
     size (600, 400);

     // kuvion mitat määrittävät vakiot
     final int KANTA = 500; // suunnikkaan leveys
     final int KORKEUS = 150; // suunnikkaan korkeus
     // suunnikkaan vasemman yläkulman x-koordinaatti
     final int VASEN_YLAKULMA_X = 20;

     // väreihin liittyvät vakiot
     final int SAVY = 0; // värien värisävy
     final int KYLLAISYYS_SUURIN = 90; // räikeimmän värin kylläisyys
     final int KIRKKAUS_SUURIN = 100; // vaaleimman värin kirkkaus
     // kylläisyys ja kirkkaus vähenevät alueesta toiseen näin paljon
     final int VARIARVO_LASKU = 45; 

     <<suunnikas-vakioilla-runko>>
   #+END_SRC

** Tehtävät
   1. Piirrä \((400\times 400)\)-kokoiseen piirtoikkunaan neliö, jonka
      vasen yläkulma on koordinaateissa \((0, 0).\) Määrittele neliön
      sivun pituus vakiona ~SIVU~, jonka arvo on ensimmäisessä
      versiossasi 200. Muuntele vakion suuruutta ja varmista, että
      ohjelmasi toimii kuten pitääkin.
   2. Piirrä \((400\times 400)\)-kokoiseen piirtoikkunaan suorakaide,
      jonka leveyden ja korkeuden suhde on aina \(3:1,\) ja jonka
      korkeutta voit säädellä vakion avulla. Suorakaiteen vasen
      yläkulma on \(y\)-akselilla, ja vasemman yläkulman etäisyys
      origosta on sama kuin suorakaiteen korkeus. Muuntele vakion
      suuruutta.
   3. Piirrä \((400\times 400)\)-kokoiseen piirtoikkunaan neliö, jonka
      sivun pituutta voit säädellä vakiolla, ja jonka etäisyys
      origosta on aina kaksi kertaa niin suuri kuin neliön lävistäjän
      pituus. Muuntele vakion suuruutta.
* Laskulauseke
* Lauseke
* Muuttuja
* Ehdollinen suorittaminen
* ~while~-silmukka
* ~for~-silmukka
* Pikseli <<txt:pikseli>>
* Funktion määritteleminen
* Animaatio
* Aika
* Hiiri
* Satunnaisuus
* Rekursio
* Ratkaisut
** [[txt:piirtaminen]]
   1. 
       #+BEGIN_SRC processing :exports both
         size (800, 600);
         rect (160, 90, 200, 300);
         triangle (110, 500, 370, 420, 480, 570);
         quad (730, 50, 450, 370, 770, 530, 610, 250);
       #+END_SRC
   2. 
      a) 
	 #+BEGIN_SRC processing :noweb yes :exports code
	 <<piirtaminen-kolmio>>
	 #+END_SRC
      b) 
	 #+BEGIN_SRC processing :noweb yes :exports code
	 <<piirtaminen-raidat>>
	 #+END_SRC
      c) 
	 #+BEGIN_SRC processing :noweb yes :exports code
	 <<piirtaminen-neliot>>
	 #+END_SRC
   3. Esimerkkejä mahdollisista ratkaisuista.
      a) 
	 #+BEGIN_SRC processing :exports both
           size (300, 200);
           quad (50, 50, 130, 50, 190, 150, 10, 150);
	 #+END_SRC
      b) 
	 #+BEGIN_SRC processing :exports both
           size (300, 200);
           triangle (50, 150, 250, 150, 150, 100);
	 #+END_SRC
      c) 
	 #+BEGIN_SRC processing :exports both
           size (300, 200);
           quad (50, 150, 200, 150, 250, 50, 100, 50);
	 #+END_SRC
   4. 
      a) 
	  #+BEGIN_SRC processing :noweb yes :exports code
	  <<piirtaminen-suorakaide-keskella>>
	  #+END_SRC
      b) 
	  #+BEGIN_SRC processing :noweb yes :exports code
	  <<piirtaminen-sisakkaiset-suunnikkaat>>
	  #+END_SRC
   5. Useita eri ratkaisuja.
   6. Tasasivuisen kolmion korkeudeksi saadaan Pythagoraan lauseella
      noin 104.
      #+BEGIN_SRC processing :exports both
        size (300, 300);
        triangle (90, 202, 210, 202, 150, 98);
      #+END_SRC

** [[txt:kommentteja-vareja]]
   1. 
      #+BEGIN_SRC processing :exports both
        size (600, 400);
        colorMode (HSB, 100);
        background (9, 45, 76);
        noStroke ();
        fill (54, 100, 100);
        rect (100, 100, 400, 200);
      #+END_SRC
   2. 
      #+BEGIN_SRC processing :exports both
        size (300, 300);
        colorMode (HSB, 100);
        background (65, 100, 100);
        fill (0, 100, 100);
        stroke (35, 100, 100);
        rect (100, 100, 100, 100);
      #+END_SRC
   3. 
       #+BEGIN_SRC processing :exports code :noweb yes
       <<vari-suorakulmio-kolmio>>
       #+END_SRC
   4. 
      a) 
	 #+NAME: vari-komponenttien-muutos-alku
	 #+BEGIN_SRC processing :exports none
           size (300, 200);
           colorMode (HSB, 100);
           background (44, 66, 71);
	   noStroke ();
	 #+END_SRC

	 #+BEGIN_SRC processing :exports both :noweb yes
	   <<vari-komponenttien-muutos-alku>>
           fill (44, 66, 46);
           rect (50, 50, 100, 100);
           fill (44, 66, 96);
           rect (150, 100, 50, 50);
	 #+END_SRC

      b) 
	 #+BEGIN_SRC processing :exports both :noweb yes
           <<vari-komponenttien-muutos-alku>>
           fill (44, 36, 71);
           triangle (10, 10, 150, 70, 90, 130);
           fill (44, 96, 71);
           triangle (100, 180, 120, 70, 250, 110);
	 #+END_SRC

   5. 
      #+BEGIN_SRC processing :exports code :noweb yes
      <<vari-tiikeri>>
      #+END_SRC

   6. Ahvenanmaan lipun leveyden ja korkeuden suhde on \(26 : 17.\)
      Piirtoikkunan mitoiksi voidaan valita vaikkapa \((520\times
      340).\) Leveyssuunnassa lippu jakautuu tällöin eri väreihin
      suhteissa \(160 : 30 : 40 : 30 : 260\) ja pystysuunnassa
      suhteissa \(120 : 30 : 40 : 30 : 120.\) Sinisen värin HSB-arvot
      ovat \((59, 100, 49),\) keltaisen \((14, 100, 100)\) ja punaisen
      \((0, 100, 94).\)

      #+BEGIN_SRC processing :exports code :noweb yes
      <<vari-ahvenanmaan-lippu>>
      #+END_SRC
** [[txt:kokonaislukuvakio]]
   1. 
      #+BEGIN_SRC processing :exports both
        size (400, 400);
        final int SIVU = 100;
        rect (0, 0, SIVU, SIVU);
      #+END_SRC
   2. 
      #+BEGIN_SRC processing :exports both
        size (400, 400);

        final int KORKEUS = 100;
        rect (0, KORKEUS, 3 * KORKEUS, KORKEUS);
      #+END_SRC
   3. 
      #+BEGIN_SRC processing :exports both
        size (400, 400);
        final int SIVU = 100;
        final int KOORDINAATTI = 2 * SIVU;

        rect (KOORDINAATTI, KOORDINAATTI, SIVU, SIVU);
      #+END_SRC
