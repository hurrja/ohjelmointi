#+INCLUDE: ohjelmointi-kappaleiden-yhteiset-asetukset.org

* ~while~-silmukka
** Esimerkki
   Piirretään alla oleva kuva, jossa on \(20\times 20\)-kokoisia
   neliöitä piirtoikkunan lävistäjällä.

   #+NAME: nelioita-lavistajalla
   #+BEGIN_SRC processing
     size (400, 400);
     final float SIVU = 20;
     noStroke (); // ei piirretä neliöiden ääriviivoja

     float k = 0; // neliön yläkulman x- ja y-koordinaatti

     while (k < width) // niin kauan kuin ollaan ikkunan sisällä...
     {
       // ... suoritetaan tämä lauselohko
       rect (k, k, SIVU, SIVU); // piirretään neliö
       k = k + SIVU; // kasvatetaan yläkulman koordinaattia
     }
   #+END_SRC

   Sen sijaan, että joutuisimme kirjoittamaan yhden koodirivin kutakin
   neliötä kohden, ohjelma voidaan kirjoittaa
   ~while~-kontrollirakenteen avulla.

   #+BEGIN_SRC processing :exports code :noweb yes
   <<nelioita-lavistajalla>>
   #+END_SRC
** ~while~-rakenne
   #+BEGIN_QUOTE
   ~while~-rakenteessa on
   1. ~ehto~, joka määrää kuinka kauan lauseke tai lausekelohko suoritetaan
   2. lauseke tai lausekelohko, joka suoritetaan niin kauan kuin ehto
      on tosi
   #+BEGIN_EXAMPLE
     while (ehto)
       lauseke tai lohko, joka suoritetaan niin kauan kuin ehto tosi;
   #+END_EXAMPLE
   #+END_QUOTE

   Huomaa, että
   - ~ehto~ kirjoitetaan sulkujen sisään
   - ~while~-rivin lopussa ei ole puolipistettä.
** Nimitys ~while~-silmukka
   ~while~-rakennetta kutsutaan yleisemmin ~while~-silmukaksi.
   Tietokoneohjelman toimintaa kuvaavissa piirroksissa, joita
   kutsutaan /vuokaavioiksi/, ~while~-rakenne muodostaa silmukan. Alla
   on piirretty vuokaavio edellä kuvatusta ohjelmasta. Alla olevassa
   vuokaaviossa
   - ympyrät kuvaavat ohjelman alkua ja loppua
   - alusta liikutaan loppuun nuolien suuntaisesti
   - ruutu kuvaa ehtoa, josta voidaan lähteä useaan suuntaan
   - suorakaide kuvaa toimintaa.
   Piirrokseen muodostuu silmukka taaksepäin, kun tietokoneohjelman
   suoritus palaa takaisin ohjelman aiemmalle riville.

   #+BEGIN_SRC asymptote :file while-silmukka.svg
     import flowchart;
     import unicode;

     size (8cm, 0);


     block beginBlock = circle("alku",(0, 0));
     block initBlock = rectangle ("k = 0", (0, -.5));
     block conditionBlock = diamond ("k $<$ width",(0,-1));
     block actionBlock= rectangle ("piirretään neliö kohtaan (k, k)",(0,-1.6));
     block postBlock = rectangle ("k = k + \texttt{SIVU} ",(0,-2));
     block endBlock = circle("loppu",(0,-2.5));
     pair p = (-1, -1);
     pair q = (1, -1);
     dot (q, invisible); // to make x bounding well defined

     draw (beginBlock);
     draw (initBlock);
     draw (conditionBlock);
     draw (actionBlock);
     draw (postBlock);
     draw (endBlock);

     add(new void(picture pic, transform t) {
   	draw(pic,path(new pair[]{beginBlock.bottom(t),initBlock.top(t)},
   		      Vertical),Arrow,PenMargin);
   	draw(pic,path(new pair[]{initBlock.bottom(t),conditionBlock.top(t)},Vertical),
   	     Arrow,PenMargin);
   	draw(pic,Label("kyllä",0.2,SW),path(new pair[]{conditionBlock.bottom(t),actionBlock.top(t)},
   					    Vertical),Arrow,PenMargin);
   	draw(pic,path(new pair[]{actionBlock.bottom(t),postBlock.top(t)},
   		      Vertical),Arrow,PenMargin);
   	draw(pic,path(new pair[]{postBlock.left(t),t*p},
   		      Horizontal),PenMargin);
   	draw(pic,path(new pair[]{t*p,conditionBlock.left(t)},
   		      Horizontal),Arrow,PenMargin);
   	draw(pic,Label("ei",0.5,NE),path(new pair[]{conditionBlock.right(t),t*q},Horizontal),PenMargin);
   	draw(pic,path(new pair[]{t*q,endBlock.right(t)},
   		      Vertical),Arrow,PenMargin);
         });

   #+END_SRC
** Esimerkki
   Piirretään \(400\times 400\)-kokoiseen ikkunaan alla olevan
   kaltainen kuva. Kunkin viivan kuvan alareunassa olevan päätepisteen
   \(x\)-koordinaatti määrää viivan värisävyn siten, että värisävy on
   \(\displaystyle\frac{x}{4}.\) Kuvan alareunan vierekkäisten
   päätepisteiden väli on 5 pikseliä.

   #+NAME: viivoja-origosta-alareunaan
   #+BEGIN_SRC processing
     size (400, 400);

     float x = 0; // alareunassa olevan päätepisteen x-koordinaatti

     colorMode (HSB, 100);
     background (0); // musta tausta

     while (x < width) // niin kauan kun piste on kuvan sisällä
     {
       stroke (x / 4, 100, 100); // asetetaan väri
       line (0, 0, x, height); // piirretään viiva
       x = x + 5;
     }
   #+END_SRC

   #+BEGIN_SRC processing :exports code :noweb yes
   <<viivoja-origosta-alareunaan>>
   #+END_SRC
** Esimerkki
  Piirretään alla oleva kuva, jossa neliön muotoiseen piirtoikkunaan
  piirretään ruudukko. Ruudukossa vierekkäisten yhdensuuntaisten
  viivojen välinen etäisyys on vakio ~L~. 
  #+NAME: ruudukko-alku
  #+BEGIN_SRC processing :exports none
    size (401, 401);
    final float L = 10; // viivojen välinen etäisyys
  #+END_SRC

  #+NAME: ruudukko-kahdella-silmukalla
  #+BEGIN_SRC processing :noweb yes
    <<ruudukko-alku>>

    float x = 0; // pystysuoran viivan x-koordinaatti
    while (x < width)
    {
      line (x, 0, x, height);
      x = x + L;
    }

    float y = 0; // vaakasuoran viivan y-koordinaatti
    while (y < height)
    {
      line (0, y, width, y);
      y = y + L;
    }
  #+END_SRC

  Yllä olevassa esimerkissa piirtoikkunan koko on \(401\times 401\) ja
  vakion ~L~ arvo 10. Tällöin viimeinen pystyviiva piirtyy ruudukon
  oikeaan reunaan: ensimmäinen pystyviiva piirretään 1. pikselin
  kohdalle, toinen pystyviiva 11. pikselin kohdalle jne., jolloin
  viimeinen kuvaan piirrettävä pystyviiva tulee 401. pikselin
  kohdalle.

  Kirjoitetaan kaksi erilaista ratkaisua. Ensimmäisessä piirretään
  ensin pystyviivat yhdessä ~while~-silmukassa ja sen jälkeen
  vaakaviivat toisessa silmukassa.
  
  #+BEGIN_SRC processing :noweb yes :exports code
  <<ruudukko-kahdella-silmukalla>>
  #+END_SRC

  Toisessa ratkaisussa riittää yksi silmukka, jonka sisällä piirretään
  yksi vaakasuora ja yksi pystysuora viiva.
  #+BEGIN_SRC processing :exports both :noweb yes
    <<ruudukko-alku>>

    float p = 0; // viivan toinen koordinaatti
    while (p <= width)
    {
      line (p, 0, p, height); // pystysuora viiva
      line (0, p, width, p); // vaakasuora viiva
      p = p + L;
    }

  #+END_SRC
** Esimerkki
   Piirretään alla oleva sahalaitakuvio piirtoikkunaan, jonka koko on
   \(400\times 400\). Origosta alkavan janan pituus on 10, ja kukin
   seuraava jana on 10 prosenttia edellistä pidempi. Viivaan voidaan
   käyttää yhteensä korkeintaan 700 pikseliä. Kulmapisteissä
   päällekkäin meneviä yksittäisiä pikseleitä ei tarvitse ottaa
   huomioon.

   #+NAME: sahalaita-pitenevin-askelin
   #+BEGIN_SRC processing
     size (400, 400);

     colorMode (HSB, 100);
     background (0); // musta tausta
     stroke (100); // valkoiset viivat

     float askel = 10; // kunkin askeleen pituus
     float pikseleitaJaljella = 700; // jäljellä olevien pikselien määrä

     float x = 0, y = 0; // viivan kärkipiste, alussa origossa
     float xSuunta = 1, ySuunta = 0; // määräävät seuraavan askeleen suunnan

     // niin kauan kun pikseleitä on jäljellä riittävästi...
     while (pikseleitaJaljella >= askel)
     {
       // lasketaan viivan seuraava kärkipiste
       float xSeuraava = x + xSuunta * askel;
       float ySeuraava = y + ySuunta * askel;

       line (x, y, xSeuraava, ySeuraava); // piirretään viiva

       // päivitetään viivan kärkipisteen koordinaatit
       x = xSeuraava;
       y = ySeuraava;
       
       // vähennetään jäljellä olevien pikseleiden määrää
       pikseleitaJaljella = pikseleitaJaljella - askel;

       askel = 1.1 * askel; // kasvatetaan askelta 10 prosenttia
  
       // päätellään seuraavan askeleen suunta
       if (xSuunta == 1)
       {
         xSuunta = 0;
         ySuunta = 1;
       }
       else
       {
         xSuunta = 1;
         ySuunta = 0;
       }
     }
   #+END_SRC

   Alla olevassa ohjelmassa muuttujat ~x~ ja ~y~ sisältävät tiedon
   piirrettävän viivan kärkipisteestä. Kullakin kierroksella
   ~while~-silmukan sisällä lasketaan seuraavan kärkipisteen
   koordinaatit muuttujiin ~xSeuraava~ ja ~ySeuraava~, piirretään
   viiva ja päivitetään kärkipisteen koordinaatit.

   Viivan suunta muuttuu kierroksesta toiseen. Suunta ilmaistaan
   ohjelmassa muuttujien ~xSuunta~ ja ~ySuunta~ avulla. Tällaisten
   muuttujien käytön avulla voidaan tehtävissä kirjoittaa myös
   monimutkaisempia ohjelmia. Jos muuttujan ~xSuunta~ arvo on
   - 1, liikutaan oikealle
   - 0, ei liikuta \(x\)-akselin suunnassa.
   Vastaavasti jos muuttujan ~ySuunta~ arvo on
   - 1, liikutaan alaspäin
   - 0, ei liikuta \(y\)-akselin suunnassa.
   Näiden muuttujien arvot voidaan päivittää kullakin kierroksella
   huomaamalla, että 
   - jos muuttujan ~xSuunta~ arvo on 1, seuraavalla kierroksella
     liikutaan alas
   - muuten liikutaan seuraavalla kierroksella oikealle.

   #+BEGIN_SRC processing :exports code :noweb yes
   <<sahalaita-pitenevin-askelin>>
   #+END_SRC

** Tehtävät
   1. 
      #+BEGIN_SRC processing
        size (400, 400);
        colorMode (HSB, 100);
        background (0);
        stroke (100);
        float x = width / 2.0, y = height / 2.0;
        float narua = 1500;
        float xSuunta = 0, ySuunta = 1;
        float askel = 5;

        while (narua >= askel)
        {
          float xSeuraava = x + xSuunta * askel;
          float ySeuraava = y + ySuunta * askel;
          line (x, y, xSeuraava, ySeuraava);

          x = xSeuraava;
          y = ySeuraava;

          narua = narua - askel;
          askel = askel * 1.2;

          if (xSuunta == 0)
          {
            if (ySuunta == 1)
      	xSuunta = 1;
            else
      	xSuunta = -1;

            ySuunta = 0;
          }
          else
          {
            if (xSuunta == 1)
      	ySuunta = -1;
            else
      	ySuunta = 1;

            xSuunta = 0;
          }
        }
   #+END_SRC
   2. 
      #+BEGIN_SRC processing
        size (600, 600);

        colorMode (HSB, 100);
        background (0);

        final float SADE = 10;
        final float ASKEL = 10 * SADE;

        float kohde = SADE;
        float jahtaajaX = 0;
        float jahtaajaY = height;

        while (kohde <= width - SADE)
        {
          float varisavy = kohde / width * 100;
          stroke (varisavy, 100, 100);
          fill (varisavy, 100, 100);

          ellipse (kohde, kohde, SADE, SADE);

          float jahtaajaSeuraavaX = (jahtaajaX + kohde) / 2;
          float jahtaajaSeuraavaY = (jahtaajaY + kohde) / 2;
          line (jahtaajaX, jahtaajaY, jahtaajaSeuraavaX, jahtaajaSeuraavaY);
          jahtaajaX = jahtaajaSeuraavaX;
          jahtaajaY = jahtaajaSeuraavaY;
          ellipse (jahtaajaX, jahtaajaY, SADE / 2, SADE / 2);

          kohde = kohde + ASKEL;
        }
	#+END_SRC



