#+INCLUDE: ohjelmointi-kappaleiden-yhteiset-asetukset.org

* Satunnaisuus
** Funktio ~random()~
   #+BEGIN_QUOTE
   Processing kielen funktio
   #+BEGIN_EXAMPLE
   float random (float k)
   #+END_EXAMPLE
   palauttaa satunnaisen desimaaliluvun, joka arvo on vähintään nolla
   ja pienempi kuin ~k~.

   Vaihtoehtoisesti funktio
   #+BEGIN_EXAMPLE
   float random (float v, float k)
   #+END_EXAMPLE
   palauttaa satunnaisen desimaaliluvun, joka arvo on vähintään ~v~ ja
   pienempi kuin ~k~.
   #+END_QUOTE
** Esimerkki
   Alla oleva ohjelma piirtää 10 ympyrää satunnaisiin piirtoikkunan
   kohtiin.
   #+BEGIN_SRC processing :exports both
     size (600, 400);
     final int HALKAISIJA = 10;

     int n = 1;
     while (n < 10)
     {
       ellipse (random (width), random (height), HALKAISIJA, HALKAISIJA);
       n++;
     }
   #+END_SRC
** Esimerkki
   [[file:satunnaisuus-ympyrajahti-sivu.org][Tällä sivulla]] oleva interaktiivinen animaatio on ohjelmoitu alla
   olevalla ohjelmakoodilla. Ohjelmassa piirretään ympyrä satunnaiseen
   kohtaan sen jälkeen, kun käyttäjä on painanut hiiren painiketta
   ympyrän sisällä. Ohjelmasta kannattaa huomata seuraavat seikat.
   - Ympyrän keskipiste asetetaan satunnaiseen kohtaan funktion
     ~uusiKohta()~ avulla. Funktiota kutsutaan kahdessa eri
     tapauksessa: ohjelman alussa sekä painalluksen ollessa ympyrän
     sisällä.
   - Ympyrän keskipisteen \(x\)-koordinaatti on satunnaisluku, jonka
     arvo on vähintään ~SADE~ ja pienempi kuin ~(width - SADE)~. Näin
     varmistetaan, että piirretty ympyrä on piirtoikkunan sisällä.

   #+BEGIN_SRC processing :noweb yes :exports code
   <<satunnaisuus-ympyrajahti>>
   #+END_SRC
** Satunnainen kokonaisluku
   Miten voidaan arpoa satunnainen kokonaisluku, joka on joko 0 tai 1?
   Yksi tapa ratkaista ongelma on käyttää funktiota
   #+BEGIN_EXAMPLE
   int floor (float a)
   #+END_EXAMPLE
   Silloin, kun ~a~ on positiivinen, funktio palauttaa luvun ~a~
   kokonaislukuosan. Esimerkiksi funktiokutsu ~floor (1.99)~ palauttaa
   arvon 1. Jos arvotaan satunnaisluku, jonka arvo on vähintään 0 ja
   pienempi kuin 2, niin saadun satunnaisluvun kokonaislukuosa on yhtä
   suurella todennäköisyydellä 0 tai 1. Alla olevaan kuvaan
   lukusuoralle punaisella merkittyjen lukujen kokonaislukuosa on 0 ja
   sinisellä merkittyjen kokonaislukuosa 1.
   #+NAME: satunnaisuus-kokonaisluku-lukusuora
   #+BEGIN_SRC asymptote :file satunnaisuus-kokonaisluku-lukusuora.svg
     import graph;

     size (20cm, 0);
     defaultpen (fontsize (16));
     pen thickPen = linewidth (4) + squarecap;
     draw ((0, 0) -- (1, 0), red + thickPen);
     draw ((1, 0) -- (2, 0), blue + thickPen);
     xaxis ("satunnainen desimaaliluku",
            xmin = 0,
            xmax = 2,
            RightTicks);
   #+END_SRC

   #+RESULTS: satunnaisuus-kokonaisluku-lukusuora
   [[file:satunnaisuus-kokonaisluku-lukusuora.svg]]

   Alla olevassa esimerkissä piirtoikkunaan piirretään satunnaisesti
   nollia ja ykkösiä.
   #+BEGIN_SRC processing :exports both
     size (620, 200);
     colorMode (HSB, 100);
     background (0);
     fill (100);
     textAlign (CENTER, CENTER);
     textSize (20);

     // piirretään 30 satunnaista lukua 0 tai 1
     int n = 1;
     while (n <= 30)
     {
       text (floor (random (2)), 20 * n, height / 2.0);
       n++;
     }
   #+END_SRC

   Yleisemmin pätee seuraava.
   #+BEGIN_QUOTE
   Satunnainen kokonaisluku, jonka arvo on vähintään 0 ja korkeintaan
   ~k~ voidaan arpoa funktiokutsulla
   #+BEGIN_EXAMPLE
   floor (random (k + 1))
   #+END_EXAMPLE
   Vastaavasti satunnainen kokonaisluku, jonka arvo on vähintään ~v~
   ja korkeintaan ~k~ voidaan arpoa funktiokutsulla
   #+BEGIN_EXAMPLE
   floor (random (v, k + 1))
   #+END_EXAMPLE
   #+END_QUOTE

   [Tarkalleen ottaen ~floor()~ pyöristää luvun lähimpään /pienempään/
   kokonaislukuun. Esimerkiksi kutsun ~floor (-2.1)~ paluuarvo on
   \(-3.\)]
** Esimerkki
   [[file:satunnaisuus-janat-sivu.org][Tällä sivulla]] oleva animaatio on piirretty alla olevalla
   ohjelmakoodilla. Animaatiossa piirretään joka toinen sekunti
   satunnainen määrä janoja satunnaisin värein piirtoikkunan
   yläreunasta alareunaan satunnaisiin kohtiin.

   #+BEGIN_SRC processing :exports code :noweb yes
   <<satunnaisuus-janat>>
   #+END_SRC

#+INCLUDE: satunnaisuus-ympyrajahti.org
#+INCLUDE: satunnaisuus-janat.org
** Tehtäviä
   1. Tee ohjelma, jossa asetetaan satunnaisen sävyinen taustaväri
      \(400\times 400\)-kokoiseen piirtoikkunaan. Suorita ohjelmasi
      useita kertoja, jolloin näet taustavärin vaihtuvan kerrasta
      toiseen.
   2. Tee ohjelma, joka piirtää janan \(600\times 400\)-kokoisen
      piirtoikkunan satunnaisesta kohdasta toiseen satunnaiseen
      kohtaan. Alla on esimerkki ohjelman piirtämästä kuvasta.
      #+NAME: satunnaisuus-jana
      #+BEGIN_SRC processing
        size (600, 400);
        line (random (width), random (height), random (width), random (height));
      #+END_SRC
   3. Tee ohjelma, joka piirtää 100 erisävyistä neliötä \(600\times
      400\)-kokoiseen piirtoikkunaan satunnaisiin kohtiin. Kunkin
      neliön sivun pituus on 50. Neliöiden tulee sijaita piirtoikkunan
      sisällä eikä neliöillä ole ääriviivoja. Alla on esimerkki
      ohjelman piirtämästä kuvasta.
      #+NAME: satunnaisuus-neliot
      #+BEGIN_SRC processing
        size (600, 400);
        colorMode (HSB, 100);
        noStroke ();
        final int SIVU = 50;

        int n = 1;
        while (n <= 100)
        {
          fill (random (100), 100, 100);
          rect (random (width - SIVU), random (height - SIVU), SIVU, SIVU);
          n++;
        }

      #+END_SRC
   4. Tee ohjelma, joka piirtää \(600\times 600\)-kokoiseen
      piirtoikkunaan satunnaisen määrän sisäkkäisiä ympyröitä alla
      olevan kuvan mukaisesti.  Ympyröitä on vähintään 2 ja
      korkeintaan 50. Ympyrät pienenevät uloimmasta sisimpään. Uloin
      ympyrä on aina valkoinen, ja sen halkaisija on piirtoikkunan
      sivun pituus. Sisemmän ympyrän halkaisija on aina 0,95 kertaa
      edellisen ulomman ympyrän halkaisija.
      #+NAME: satunnaisuus-sisakkaiset-ympyrat
      #+BEGIN_SRC processing
        size (600, 600);
        colorMode (HSB, 100);
        background (0);

        int ympyroita = floor (random (2, 51));

        float halkaisija = width;
        boolean valkoinen = true;

        int n = 1;

        while (n <= ympyroita)
        {
          if (valkoinen)
            fill (100);
          else
            fill (0);

          ellipse (width / 2.0, height / 2.0, halkaisija, halkaisija);
          n++;
          halkaisija = 0.95 * halkaisija;
          valkoinen = !valkoinen;
        }
      #+END_SRC
   5. Satunnaisesti ympyrä, neliö tai kolmio.
   6. Jotain tapahtuu satunnaisin väliajoin.
** Ratkaisuja
   1. 
      #+BEGIN_SRC processing :exports both
        size (400, 400);
        colorMode (HSB, 100);
        background (random (100), 100, 100);
      #+END_SRC
   2. 
      #+BEGIN_SRC processing :noweb yes :exports code
      <<satunnaisuus-jana>>
      #+END_SRC
   3. 
      #+BEGIN_SRC processing :noweb yes :exports code
      <<satunnaisuus-neliot>>
      #+END_SRC
   4. 
      #+BEGIN_SRC processing :noweb yes :exports code
      <<satunnaisuus-sisakkaiset-ympyrat>>
      #+END_SRC
