* Desimaaliluku ja jakolasku
** Desimaalierotin
   Processing-ohjelmointikielessä desimaalierotin on piste. Seuraava
   esimerkki piirtää kohtaan \((100, 100)\) suorakaiteen, jonka
   korkeus on leveyden ja luvun 0,3 tulo. (Toisin sanoen korkeus on
   30\thinsp{}% leveydestä.)
   #+BEGIN_SRC processing :exports both
     size (400, 400);
     final float LEVEYS = 150;
     rect (100, 100, LEVEYS, 0.3 * LEVEYS);
   #+END_SRC
** Jakolasku
   Jakolaskuoperaattori Processing-kielessä on kauttaviiva ~/~. Alla
   olevassa esimerkissä piirretään neliö ja sen kanssa kulmittain
   suorakaide, joka leveys on puolet ja korkeus kolmasosa neliön sivun
   pituudesta.
   #+BEGIN_SRC processing
     size (400, 400);
     final float SIVU = 140;
     rect (0, 0, SIVU, SIVU);
     rect (SIVU, SIVU, SIVU / 2, SIVU / 3);
   #+END_SRC
** Kokonaislukujen jakolasku antaa kokonaisluvun
   Jakolaskuun liittyy suorastaan vaarallinen yksityiskohta. 

   #+BEGIN_QUOTE
   Kahden kokonaisluvun jakolasku antaa tulokseksi
   kokonaisluvun. Tulos on jakolaskun kokonaislukuosa
   #+END_QUOTE

   Alla olevaan taulukkoon on kirjattu muutamia jakolaskuja sekä
   niiden antama tulos. 
   | jakolasku | tulos |
   |-----------+-------|
   | ~10 / 2~  |     5 |
   | ~8 / 5~   |     1 |
   | ~1 / 5~   |     0 |
   Ensimmäinen tulos on odotettu. Kaksi muuta ovat esimerkkejä siitä,
   että kokonaislukujen jakolaskussa desimaaliosa jätetään pois.

   Miten kokonaislukuja voidaan sitten jakaa niin, että tulokseksi
   saadaan desimaaliluku? Merkitsemällä toinen kokonaisluku
   desimaalilukuna.
   | jakolasku  | tulos |
   |------------+-------|
   | ~10.0 / 2~ |   5.0 |
   | ~8 / 5.0~  |   1.6 |
   | ~1.0 / 5~  |   0.2 |
   | ~1 / 5.0~  |   0.2 |
   
   Kaikki ~float~-tyyppiset vakiot ovat desimaalilukuja, vaikka niiden
   arvoksi olisi asetettu kokonaisluku.

   Miksi kokonaislukujen jakolasku antaa tulokseksi kokonaisluvun?
   Koska se on hyödyllinen laskutoimitus ja tietokone osaa laskea sen
   nopeammin.
** Sisäiset vakiot ~width~ ja ~height~
   Processing-ohjelma määrittelee automaattisesti kokonaislukuvakiot
   ~width~ ja ~height~, joiden arvot ovat piirtoikkunan leveys ja
   korkeus. Koska ~width~ ja ~height~ ovat kokonaislukuja, niiden
   jakaminen kokonaisluvulla antaa tuloksena kokonaisluvun. Yleensä
   tällä ei ole suurta vaikutusta saatuun kuvaan, koska ikkunan koko
   on suuri luku. Jos ~width~ on vaikkapa 455, niin ~width / 2~ antaa
   arvoksi 227, kun taas ~width / 2.0~ antaa 227.5. Lisäksi
   piirrettäessä kuvioita näyttöön desimaaliarvot pyöristetään usein
   taas kokonaisluvuiksi.

   Seuraavassa esimerkissä piirretään piirtoikkunaan mahdollisimman
   suuri ympyrä. Piirtoikkunan keskikohta on (~width/2.0~,
   ~height/2.0~) ja laskutoimitus ~SIVU / 4.0~ antaa neljäosan neliön
   sivun pituudesta. Ympyrä piirretään käyttämällä funktiota
   ~ellipse()~, jolla voidaan piirtää eri kokoisia
   ellipsejä. Funktiolle annetaan neljä lukua.  Kaksi ensimmäistä
   lukua määräävät ellipsin keskipisteen. Seuraava luku määrää
   ellipsin leveyden ja viimeinen ellipsin korkeuden. Jos leveys ja
   korkeus ovat samat, saadaan ympyrä.
   #+BEGIN_SRC processing
     size (400, 400);
     // ympyrän säde
     final float SADE = width / 2.0; 
     ellipse (SADE, SADE, width, width);
   #+END_SRC
** Esimerkki
   Suomen, Ruotsin ja Tanskan lipuissa on jonkin värinen risti toisen
   värisellä pohjalla. Värien lisäksi lipuissa vaihtelevat
   mittasuhteet. Esimerkiksi Ruotsin lippu jakautuu eri osiin
   vasemmasta yläkulmasta katsoen pystysuunnassa suhteessa \(4 : 2 :
   4\) ja vaakasuunnassa suhteessa \(5 : 2 : 9\). Alla oleva kuva
   havainnollistaa näitä mittoja.

   #+NAME: lippu-mitat
   #+BEGIN_SRC asymptote :file lippu-mitat.svg :cache yes
     size (15cm, 0);
     int YLA = 4, KESKI_PYSTY = 2, ALA = 4;
     int VASEN = 5, KESKI_LEVEYS = 2, OIKEA = 9;

     pair A = (0, 0);
     pair B = (0, ALA);
     pair C = B + (0, KESKI_PYSTY);
     pair D = C + (0, YLA); 
     draw ((string) ALA, A -- B, Arrows);
     draw ((string) KESKI_PYSTY, B -- C, Arrows);
     draw ((string) YLA, C -- D, Arrows);

     pair F = D + (VASEN, 0);
     draw ((string) VASEN, D -- F, Arrows);
     pair G = F + (KESKI_LEVEYS, 0);
     draw ((string) KESKI_LEVEYS, F -- G, Arrows);
     pair H = G + (OIKEA, 0);
     draw ((string) OIKEA, G -- H, Arrows);

     draw (A -- (H.x, A.y) -- H, dashed);
     draw (B -- (F.x, B.y) -- (F.x, A.y), dashed);
     draw (C -- (F.x, C.y) -- F, dashed);
     draw (G -- (G.x, C.y) -- (H.x, C.y), dashed);
     draw ((G.x, A.y) -- (G.x, B.y) -- (H.x, B.y), dashed);
   #+END_SRC

   #+RESULTS[ca51d06e6e710c7a24ccd0aaa1c7b4a5ff1afa4e]: lippu-mitat
   [[file:lippu-mitat.svg]]

   Alla oleva ohjelma piirtää neliön muotoiseen ikkunaan vakioita
   vaihtelemalla näiden kolmen eri valtion liput. Vakioina annetaan
   mittasuhteet sekä värien tiedot. Lippu piirretään koko
   piirtoikkunan levyisenä. Ensimmäisenä lasketaan, mikä on tällöin
   lipun mitoissa olevan yhden \ldquo{}osan\rdquo{} suuruus. Jos
   leveys on vaikkapa 600, ja kyseessä on Ruotsin lippu, niin yhden
   osan suuruus on tällöin \[ \frac{600}{5 + 2 + 9} = 37,5. \]
 
   #+NAME: liput-runko
   #+BEGIN_SRC processing :exports none
     // yhden osan pituus kuvassa: kuvan leveys jaettuna vaakasuunnan
     // osien summalla
     final float OSA = width / (VASEN + KESKI_LEVEYS + OIKEA);
     
     // lipun korkeus
     final float KORKEUS = (YLA + KESKI_PYSTY + ALA) * OSA;

     colorMode (HSB, 100);
     noStroke ();

     fill (TAUSTA_SAVY, TAUSTA_KYLLAISYYS, TAUSTA_KIRKKAUS);
     rect (0, 0, width, KORKEUS);

     fill (RISTI_SAVY, RISTI_KYLLAISYYS, RISTI_KIRKKAUS);
     rect (VASEN * OSA, 0, KESKI_LEVEYS * OSA, KORKEUS);
     rect (0, YLA * OSA, width, KESKI_PYSTY * OSA);
   #+END_SRC

   #+BEGIN_SRC processing :exports both :noweb yes
     size (600, 600);
     // suhteet vaakasuunnassa
     final float VASEN = 5;
     final float KESKI_LEVEYS = 2;
     final float OIKEA = 9;

     // suhteet pystysuunnassa
     final float YLA = 4;
     final float KESKI_PYSTY = 2;
     final float ALA = 4;

     // taustaväri
     final float TAUSTA_SAVY = 58;
     final float TAUSTA_KYLLAISYYS = 100;
     final float TAUSTA_KIRKKAUS = 26;

     // ristin väri
     final float RISTI_SAVY = 13;
     final float RISTI_KYLLAISYYS = 100;
     final float RISTI_KIRKKAUS = 100;

     <<liput-runko>>
   #+END_SRC

   Muuttamalla kuvan kokoa sekä vakioita, jotka säätelevät
   mittasuhteita ja värejä saadaan pienempi Tanskan lippu.
   #+BEGIN_SRC processing :exports both :noweb yes
     size (350, 350);
     // suhteet vaakasuunnassa
     final float VASEN = 12;
     final float KESKI_LEVEYS = 4;
     final float OIKEA = 21;

     // suhteet pystysuunnassa
     final float YLA = 12;
     final float KESKI_PYSTY = 4;
     final float ALA = 12;

     // taustaväri
     final float TAUSTA_SAVY = 97;
     final float TAUSTA_KYLLAISYYS = 92;
     final float TAUSTA_KIRKKAUS = 78;

     // ristin väri
     final float RISTI_SAVY = 0;
     final float RISTI_KYLLAISYYS = 0;
     final float RISTI_KIRKKAUS = 100;

     <<liput-runko>>
   #+END_SRC
** Tehtävät
   1. Piirrä alla olevan kaltaiset kuvat /neliön muotoiseen/
      piirtoikkunaan. Kuvioiden tulee skaalautua, kun piirtoikkunan
      kokoa muutetaan.
      a) 
	  #+NAME: desimaaliluku-ympyrat-paallekkain
	  #+BEGIN_SRC processing
            size (300, 300);
            final float HALKAISIJA = width / 2.0;
	    final float SADE = HALKAISIJA / 2.0;
            ellipse (SADE, HALKAISIJA, HALKAISIJA, HALKAISIJA);
            ellipse (3 * SADE, HALKAISIJA, HALKAISIJA, HALKAISIJA);
	  #+END_SRC
      b) 
	  #+NAME: desimaaliluku-ympyrat-vierekkain
	  #+BEGIN_SRC processing
            size (300, 300);
            final float HALKAISIJA = height / 2.0;
            final float SADE = HALKAISIJA / 2.0;
            ellipse (HALKAISIJA, SADE, HALKAISIJA, HALKAISIJA);
            ellipse (HALKAISIJA, 3 * SADE, HALKAISIJA, HALKAISIJA);
	  #+END_SRC
      c) 
	 #+NAME: desimaaliluku-ellipsit
	 #+BEGIN_SRC processing
           size (300, 300);
	   final float PUOLET = width / 2.0;
           ellipse (PUOLET, PUOLET / 2.0, width, PUOLET);
           ellipse (PUOLET, 1.5 * PUOLET, width, PUOLET);
	 #+END_SRC
      d) 
	  #+NAME: desimaaliluku-nelja-ympyraa
	  #+BEGIN_SRC processing
            size (300, 300);
            final float HALKAISIJA = width / 2.0;
	    final float NELJANNES = width / 4.0;
            ellipse (NELJANNES, NELJANNES, HALKAISIJA, HALKAISIJA);
            ellipse (3 * NELJANNES, NELJANNES, HALKAISIJA, HALKAISIJA);
            ellipse (NELJANNES, 3 * NELJANNES, HALKAISIJA, HALKAISIJA);
            ellipse (3 * NELJANNES, 3 * NELJANNES, HALKAISIJA, HALKAISIJA);
	  #+END_SRC
** Ratkaisuja
   1. 
      a) 
          #+BEGIN_SRC processing :noweb yes :exports code
	  <<desimaaliluku-ympyrat-paallekkain>>
	  #+END_SRC
      b) 
          #+BEGIN_SRC processing :noweb yes :exports code
	  <<desimaaliluku-ympyrat-vierekkain>>
	  #+END_SRC
      c) 
          #+BEGIN_SRC processing :noweb yes :exports code
	  <<desimaaliluku-ellipsit>>
	  #+END_SRC
      d) 
          #+BEGIN_SRC processing :noweb yes :exports code
	  <<desimaaliluku-nelja-ympyraa>>
	  #+END_SRC
