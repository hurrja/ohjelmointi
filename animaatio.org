#+INCLUDE: ohjelmointi-kappaleiden-yhteiset-asetukset.org

* Animaatio
** Esimerkki
   Kirjoitetaan ohjelma, joka piirtää alla olevan animaation.
   #+NAME: animaatio-ympyra
   #+BEGIN_SRC processing 
     float x; // piirretyn ympyrän keskipisteen x-koordinaatti

     void setup ()
     {
       size (400, 400);
       colorMode (HSB, 100);

       // piirtotaajuus: funktiota draw() kutsutaan kerran sekunnissa
       frameRate (1); 

       // ympyrän keskipiste on alussa vasemmassa reunassa
       x = 0;
     }

     void draw ()
     {
       final float HALKAISIJA = 20;
       background (0); // musta tausta
       ellipse (x, height / 2.0, HALKAISIJA, HALKAISIJA); // ympyrä
       x = x + HALKAISIJA; // kasvatetaan muuttujan x arvoa

       // takaisin vasempaan reunaan, jos mentiin oikeasta reunasta yli
       if (x >= width)
         x = 0;
     }
   #+END_SRC

   Animaatio voidaan piirtää alla olevalla ohjelmalla. Ohjelma toimii
   seuraavasti.
   - Toisin kuin edellisessä kappaleessa, funktiossa ~setup()~ /ei
     kutsuta/ funktiota ~noLoop()~.
   - Tällöin funktiota ~draw()~ kutsutaan automaattisesti toistuvasti.
   - Funktiokutsu 
     #+BEGIN_EXAMPLE
     frameRate (1); 
     #+END_EXAMPLE
     aiheuttaa sen, että funktiota ~draw()~ kutsutaan toistuvasti
     yhden kerran sekunnissa.
   - Funktiossa ~draw()~ piirretään musta tausta ja valkoinen ympyrä,
     jonka \(x\)-koordinaatti on muuttujassa ~x~.
   - Muuttuja ~x~ on globaali muuttuja, jotta se säilyttää arvonsa
     koko ohjelman suorituksen ajan.
   - Jos ympyrän keskipiste siirtyisi kuvan ulkopuolelle (~x >=
     width~), siirrytään takaisin kuvan vasempaan reunaan (~x = 0~).
   #+BEGIN_SRC processing :noweb yes :exports code
   <<animaatio-ympyra>>
   #+END_SRC
** Animaatiosilmukka
   Alla oleva vuokaavio havainnollistaa /animaatiosilmukan/
   toimintaa. Processing-ohjelman alussa funktiota ~setup()~ kutsutaan
   kerran. Sen jälkeen funktiota ~draw()~ kutsutaan toistuvasti
   silmukassa, mikäli funktiota ~noLoop()~ ei ole kutsuttu.
   #+NAME: animaatiosilmukka
   #+BEGIN_SRC asymptote :file animaatiosilmukka.svg :cache yes
     import flowchart;
     import unicode;

     size (15cm, 0);

     block startBlock = rectangle ("\texttt{setup ()}", (0, 0));
     block updateBlock = rectangle ("\texttt{draw ()}", (1, 0));
     block systemBlock = rectangle ("odotellaan", (2, 0));
     pair p = (2, -.5);
     dot (p, invisible);

     draw (startBlock);
     draw (updateBlock);
     draw (systemBlock);

     add (new void (picture pic, transform t)
          {
            draw(pic,
   	      path (new pair[] {startBlock.right (t), updateBlock.left (t)},
   		    Horizontal),
   	      Arrow,
   	      PenMargin);
            draw(pic,
   	      path (new pair[] {updateBlock.right (t), systemBlock.left (t)},
   		    Horizontal),
   	      Arrow,
   	      PenMargin);
            draw(pic,
   	      path (new pair[] {systemBlock.bottom (t), t * p},
   		    Vertical),
   	      PenMargin);
            draw(pic,
   	      path (new pair[] {t * p, updateBlock.bottom (t)},
   		    Horizontal),
   	      Arrow,
   	      PenMargin);
          }
          );

   #+END_SRC

   #+RESULTS[319bf6f9ef2ddbc805a8f726152680b68b0eb98a]: animaatiosilmukka
   [[file:animaatiosilmukka.svg]]

** Esimerkki
   Alle oleva ohjelmakoodi piirtää animaation, jossa piirtoikkunan
   keskellä näytetään ohjelman alusta kulunut aika sekunteina.
   #+BEGIN_SRC processing :exports both
     int n;

     void setup ()
     {
       size (400, 400);
       textAlign (CENTER, CENTER);
       colorMode (HSB, 100);
       textSize (30);
       frameRate (1);
       n = 0;
     }

     void draw ()
     {
       background (0);
       text (n, width / 2.0, height / 2.0);
       n++;
     }
   #+END_SRC
** Animaatioiden piirtotaajuus tällä sivulla
   #+BEGIN_QUOTE
   Tällä sivulla olevien animaatioiden piirtotaajuus (kuvaa
   sekunnissa) on pieni, koska korkeampi piirtotaajuus aiheuttaisi
   kuormaa tietokoneelle sivua luettaessa. Esimerkiksi yllä olevissa
   animaatioissa piirtotaajuus on yksi kuva sekunnissa.
   #+END_QUOTE
** Esimerkki
   Alla oleva ohjelmakoodi piirtää animaation, jossa piirtoikkunan
   keskellä oleva ympyrä vuorotellen suurenee ja pienenee. Ympyrä on
   vihreä, jos halkaisija on yli puolet ikkunan leveydestä; muuten
   ympyrä on sininen. 

   Ohjelmassa halkaisijan muutos yhdellä askeella on tallennettu
   muuttujaan ~muutos~. Halkaisijan muutos on ohjelman alussa yhdellä
   askeleella 30. Jos ympyrä ei enää mahtuisi piirtoikkunaan, ympyrää
   aletaan pienentää, jolloin muuttujan ~muutos~ arvoksi tulee
   ~-muutos~ eli \(-30.\) Vastaavasti, kun halkaisijaa pienennetään
   voi käydä niin, että halkaisijan arvo olisi seuraavalla askeleella
   pienempi tai yhtä suuri kuin nolla. Tällöin halkaisijaa ryhdytään
   taas kasvattamaan.
   #+BEGIN_SRC processing :exports both
     float halkaisija; // ympyrän halkaisija
     float muutos; // halkaisijan muutos yhdellä askeleella

     void setup ()
     {
       size (400, 400);
       colorMode (HSB, 100);

       halkaisija = 10; // halkaisija alussa 10
       muutos = 30; // halkaisija kasvaa alussa 30 kullakin askeleella
       frameRate (1); 
     }

     void draw ()
     {
       background (0);

       if (halkaisija > width / 2.0)
         fill (35, 100, 100); // vihreä ympyrä
       else
         fill (65, 100, 100); // sininen
  
       ellipse (width / 2.0, height / 2.0, halkaisija, halkaisija);

       // ryhdytään pienentämään halkaisijaa, jos ympyrä ei mahtuisi enää
       // kuvaan, tai suurentamaan halkaisijaa, jos sen arvo ei olisi enää
       // positiivinen luku
       if (halkaisija + muutos > width)
         muutos = -muutos;
       else if (halkaisija + muutos <= 0)
         muutos = -muutos;

       halkaisija = halkaisija + muutos;
     }

   #+END_SRC
** Tehtäviä
   1. Tee alla näkyvän kaltainen animaatio. Voit valita piirtoikkunan
      ja neliön koon vapaasti.
      #+NAME: animaatio-nelio
      #+BEGIN_SRC processing
        final float SIVU = 40;
        float y; // neliön vasemman yläkulman y-koordinaatti

        void setup ()
        {
          size (400, 400);
          colorMode (HSB, 100);
          fill (100);
          y = 0;
          frameRate (1);
        }

        void draw ()
        {
          background (0);
          rect (0, y, SIVU, SIVU);
          y = y + SIVU;
          if (y >= height)
            y = 0;
        }
      #+END_SRC
   2. Tee alla näkyvän kaltainen animaatio, jossa ikkunan taustavärin
      värisävy muuttuu viidellä yksiköllä kunkin askeleen aikana.
      #+NAME: animaatio-varisavy
      #+BEGIN_SRC processing
        float savy;

        void setup ()
        {
          size (400, 400);
          colorMode (HSB, 100);
          savy = 0;
          frameRate (1);
        }

        void draw ()
        {
          background (savy, 100, 100);
          savy = savy + 5;

          if (savy > 100)
            savy = 0;
        }
      #+END_SRC
   3. Tee alla näkyvän kaltainen animaatio. Kokeile mitä animaatiossa
      tapahtuu, jos funktiosta ~draw()~ poistetaan funktion
      ~background()~ kutsu.
      #+NAME: animaatio-viiva
      #+BEGIN_SRC processing
        float x;

        void setup ()
        {
          size (400, 400);
          colorMode (HSB, 100);
          stroke (100);
          x = 0;
          frameRate (1);
        }

        void draw ()
        {
          background (0);
          line (0, 0, x, height);

          x = x + 10;
          if (x > width)
            x = 0;
        }
     #+END_SRC
   4. Tee alla olevan kaltainen liikennevalo, joissa väri vaihtuu
      viiden sekunnin välein. [Vihjeitä. Kuluneiden 5 sekunnin
      jaksojen lukumäärän saat jakamalla sekuntien lukumäärän
      luvulla 5. Sen, minkä kolmesta valosta pitäisi olla päällä voi
      tämän jälkeen selvittää laskemalla jakojäännöksen, kun jaksojen
      lukumäärän jaetaan luvulla 3.]
      #+NAME: animaatio-liikennevalot-generaattori
      #+BEGIN_SRC elisp :var toIntegerStr="%s" :exports none
        (concat "int aika; // alusta kulunut aika kokonaisina sekunteina

        void setup ()
        {
          size (200, 200);
          colorMode (HSB, 100);
          aika = 0;
          frameRate (1);
        }

        void draw ()
        {
          float savy;
          int jaksot = "
          (format toIntegerStr "aika / 5")
          "; // kuinka monta 5s jaksoa on kulunut
          int vaihe = jaksot % 3; // mikä vaihe on menossa
          if (vaihe == 0)
            savy = 0; // punainen
          else if (vaihe == 1)
            savy = 17; // keltainen
          else
            savy = 35; // vihreä

          background (savy, 100, 100);
          aika++;
        }
        ")
      #+END_SRC

      #+BEGIN_SRC processing :noweb yes
      <<animaatio-liikennevalot-generaattori("floor(%s)")>>
      #+END_SRC
   5. Tee ohjelma, joka piirtää [[file:animaatio-valmiuspalkki-sivu.org][tällä sivulla]] näkyvän
      animaation. Animaatiossa palkki on vihreä, jos sen pituus on yli
      75\thinsp{}% piirtoikkunan leveydestä; muutoin palkki on
      punainen.
** Ratkaisuja
   1. 
       #+BEGIN_SRC processing :noweb yes :exports code
       <<animaatio-nelio>>
       #+END_SRC
   2. 
       #+BEGIN_SRC processing :noweb yes :exports code
       <<animaatio-varisavy>>
       #+END_SRC
   3. Jos funktiota ~background()~ ei kutsuta, kaikki piirretyt viivat
      jäävät näkyviin. 
       #+BEGIN_SRC processing :noweb yes :exports code
       <<animaatio-viiva>>
       #+END_SRC
   4. 
       #+BEGIN_SRC processing :noweb yes :exports code
       <<animaatio-liikennevalot-generaattori()>>
       #+END_SRC
   5. 
       #+BEGIN_SRC processing :noweb yes :exports code
       <<animaatio-valmiuspalkki>>
       #+END_SRC

#+INCLUDE: animaatio-valmiuspalkki.org
