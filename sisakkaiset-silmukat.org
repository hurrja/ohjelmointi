#+INCLUDE: ohjelmointi-kappaleiden-yhteiset-asetukset.org

* Sisäkkäiset silmukat
** Esimerkki
   Piirretään alla oleva kuva, jossa on lukuja 40 pikselin välein.
   Kukin luku kertoo, kuinka monentena se on piirretty.
   #+NAME: sisakkaiset-silmukat-numerot-sarakkeittain
   #+BEGIN_SRC processing
     size (400, 400);
     colorMode (HSB, 100);
     textAlign (CENTER, CENTER);
     textSize (16);
     background (0);
     fill (100);

     final float ASKEL = 40;
     int numero = 1;

     for (float x = ASKEL; x < width; x += ASKEL)
       for (float y = ASKEL; y < height; y += ASKEL)
       {
         text (numero, x, y);
         numero++;
       }
   #+END_SRC

   Ohjelma voidaan kirjoittaa kahden /sisäkkäisen silmukan/ avulla.

   #+BEGIN_SRC processing :exports code :noweb yes
   <<sisakkaiset-silmukat-numerot-sarakkeittain>>
   #+END_SRC

   Mietitäänpä, miten ohjelma toimii.
   1. Ensin /ulommassa silmukassa/ muuttujan ~x~ arvoksi asetetaan
      ~ASKEL~ eli 40.
   2. Tämän jälkeen /sisemmän silmukan/ alussa muuttujan ~y~ arvoksi
      asetetaan myös ~ASKEL~ eli 40.
   3. Seuraavaksi suoritetaan sisempää silmukkaa niin kauan, kun ~y~
      on pienempi kuin ~height~. Tässä sisemmässä silmukassa muuttujan
      ~x~ arvoa ei muuteta. Niinpä muuttujan ~x~ arvo on koko
      ajan 40. Sisemmässä silmukassa piirretään siis ensin
      numerotaulukon ensimmäinen pystyrivi.
   4. Kun sisemmästä silmukasta poistutaan, muuttujan ~x~ uudeksi
      arvoksi tulee 80.
   5. Tämän jälkeen mennään uudestaan sisempään silmukkaan, jossa ~y~
      saa taas eri arvot. Näin piirretään siis toinen pystyrivi.

   Ohjelmassa luvut piirretään siis pystyrivi kerrallaan.
** Esimerkki
   Processing-ohjelman piirtoikkuna koostuu /pikseleistä/, joista
   kukin on pieni neliö näytöllä. Jos piirtoikkunan koko olisi
   \(10\times 10\), suurennettuna se näyttäisi alla olevan kuvan
   mukaiselta. Esimerkiksi koordinaatit \((0, 0)\) viittaavat
   vasemmassa yläkulmassa olevaan pieneen neliöön.
   #+NAME: sisakkaiset-silmukat-pikselit
   #+BEGIN_SRC asymptote :file sisakkaiset-silmukat-pikselit.svg
     size (12cm, 0);
     int N = 10;

     defaultpen (dotted + fontsize (18));

     for (int n = 0; n <= N; ++n)
       {
         draw ((0, n) -- (N, n));
         draw ((n, 0) -- (n, N));
         if (n != N)
           {
             real pos = n + .5;
             label ((string) n, (-1, N - pos));
             label ((string) n, (pos, N + 1));
           }
       }
   #+END_SRC

   Alla oleva ohjelmakoodi piirtää kuvan, jossa kunkin pikselin
   värisävyn määrittää \(x\)-koordinaatti ja kirkkauden
   \(y\)-koordinaatti.

   #+BEGIN_SRC processing :exports both
     size (400, 400);
     colorMode (HSB, 100);

     for (int x = 0; x < width; x++)
       for (int y = 0; y < height; y++)
       {
         stroke (x / 4.0, 100, y / 4.0);
         point (x, y);
       }

   #+END_SRC
** Esimerkki
   Kirjoitetaan ohjelma, joka piirtää valkoisia ympyröitä satunnaisiin
   piirtoikkunan kohtiin ja valkoiset janat kaikkien ympyröiden
   keskipisteiden välille.
   
   Ohjelma voidaan piirtää kahdella sisäkkäisellä silmukalla alla
   olevassa kuvassa havainnollistetun idean mukaisesti. Kuvitellaan,
   että ympyrät ovat rivissä, taulukon ensimmäinen ympyrä vasemmalla.
   1. Ensimmäisestä, punaisella piirretystä ympyrästä piirretään
      yhdistävä jana 2., 3. jne. ympyrään.
   2. Toisesta, keltaisella piirretystä ympyrästä piirretään yhdistävä
      jana 3., 4. jne. ympyrään. Ensimmäiseen ympyrään ei tarvitse
      enää piirtää janaa, koska se on jo piirretty.
   
   Niinpä ympyrästä, jonka indeksi on ~i~ piirretään janat ympyröihin,
   joiden indeksit alkavat luvusta ~(i + 1)~.

   #+NAME: sisakkaiset-silmukat-taulukon-parit
   #+BEGIN_SRC asymptote :file sisakkaiset-silmukat-taulukon-parit.svg
     size (20cm, 0);
     int N = 5;

     for (int i = 0; i < N; ++i)
       {
         pair P = (i, 0);
         pen p = hsv (i / N * 360, 1, 1) + linewidth (2);
         for (int j = i + 1; j < N; ++j)
           {
             pair Q = (j, 0);
             int sign = (-1)^(i % 2);
             draw (P{sign * down} :: {right}(midpoint (P -- Q) + (0, -sign / (i + 2))){right} :: {sign * up}Q, p);
           }
         fill (shift ((i, 0)) * scale (.2) * unitcircle, p);
       }

     shipout (bbox (xmargin = 10, black, Fill));
   #+END_SRC
   
   #+BEGIN_SRC processing :exports both
     size (600, 400);
     colorMode (HSB, 100);
     background (0);
     fill (100);
     stroke (100);

     final int N = 10; // ympyröiden lukumäärä
     final float D = 30; // ympyröiden halkaisija
     final float R = D / 2; // ympyröiden säde

     float[] xt, yt; // ympyröiden keskipisteet

     // varataan tila taulukoille
     xt = new float [N];
     yt = new float [N];
     
     // satunnaiset ympyröiden keskipisteet
     for (int i = 0; i < N; i++)
     {
       xt [i] = random (R, width - R);
       yt [i] = random (R, height - R);
     }

     // käydään kaikki keskipisteet läpi
     for (int i = 0; i < N; i++)
     {
       ellipse (xt [i], yt [i], D, D); // piirretään ympyrä
  
       // piirretään viivat keskipisteiden välille
       for (int j = i + 1; j < N; j++)
         line (xt [i], yt [i], xt [j], yt [j]);
     }

   #+END_SRC
** Tehtäviä
   1. Piirrä alla oleva kuva, jossa on ympyröitä \(400 \times
      400\)-kokoisessa piirtoikkunassa. Kunkin ympyrän halkaisija
      on 20.
      #+NAME: sisakkaiset-silmukat-valkoiset-ympyrat
      #+BEGIN_SRC processing
        size (400, 400);

        final float D = 20;
        final float R = D / 2;

        for (float x = R; x < width; x += D)
          for (float y = R; y < height; y += D)
            ellipse (x, y, D, D);
      #+END_SRC
   2. Alla olevassa kuvassa kunkin pikselin harmaasävyarvo on
      satunnainen. Kirjoita ohjelma, joka piirtää vastaavan kuvan.
      #+NAME: sisakkaiset-silmukat-satunnaiset-pikselit
      #+BEGIN_SRC processing
        size (600, 400);
        colorMode (HSB, 100);

        for (int x = 0; x < width; x++)
          for (int y = 0; y < height; y++)
          {
            stroke (random (100));
            point (x, y);
          }

      #+END_SRC
** Ratkaisuja
   1. 
       #+BEGIN_SRC processing :noweb yes :exports code
       <<sisakkaiset-silmukat-valkoiset-ympyrat>>
       #+END_SRC
   2. 
       #+BEGIN_SRC processing :noweb yes :exports code
       <<sisakkaiset-silmukat-satunnaiset-pikselit>>
       #+END_SRC
      
