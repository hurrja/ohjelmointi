#+INCLUDE: ohjelmointi-kappaleiden-yhteiset-asetukset.org

#+NAME: taulukko-ympyrat-annetut-x 
#+BEGIN_SRC org :exports none
20, 550, 40, 90, 470, 130, 170, 200, 300, 505, 350
#+END_SRC

#+NAME: taulukko-neliot-annetut-y
#+BEGIN_SRC org :exports none
300, 55, 30, 90, 170, 220
#+END_SRC

* Taulukko
** {{{example}}}
   Kirjoitetaan ohjelma, joka piirtää alla olevan kuvan. Kuvassa
   ympyröiden keskipisteitä ei ole arvottu satunnaisesti, vaan ne on
   annettu: call_taulukko-ympyrat-annetut-x().

   #+NAME: taulukko-ympyrat-annetuissa
   #+BEGIN_SRC processing :noweb yes
     size (600, 150);

     final int HALKAISIJA = 10;

     // määritellään taulukkovakio ja siinä olevat luvut
     final float[] XT = {<<taulukko-ympyrat-annetut-x>>};


     // Taulukon indeksi i alkaa nollasta. Taulukkoa käydään läpi niin
     // kauan, kun indeksi on pienempi kuin taulukon pituus.
     for (int i = 0; i < XT.length; i++)
       ellipse (XT [i], height / 2.0, HALKAISIJA, HALKAISIJA);
   #+END_SRC

   Ympyröitä ei voi piirtää tavallisen ~for~-silmukan avulla, koska
   \(x\)-koordinaatit ovat epäsäännöllisissä kohdissa. Voisimme
   piirtää ympyrät kirjoittamalla yhden koodirivin kutakin ympyrää
   kohden, mutta se olisi kovin työlästä.

   Ongelma voidaan ratkaista helpoiten taulukon avulla.

** Taulukkovakio
   #+BEGIN_QUOTE
   /Taulukko/ on ohjelmoinnin tietorakenne, johon voidaan tallentaa
   järjestyksessä tietty määrä lukuja tai muita arvoja. Taulukossa
   oleviin lukuihin voidaan viitata niiden järjestysnumerolla, joka
   kirjoitetaan hakasulkujen ~[]~ sisään. Järjestysnumerot /alkavat
   nollasta/. Jos taulukon nimi on ~XT~, niin taulukon
   ensimmäinen luku on
   #+BEGIN_EXAMPLE
   XT [0]
   #+END_EXAMPLE
   Hakasuluissa olevaa kokonaislukua kutsutaan
   /indeksiksi/. Välilyönti taulukon nimen ja hakasulkujen välissä on
   valinnainen.

   Taulukon /pituus/ on siihen mahtuvien lukujen määrä. Jos taulukon
   nimi on ~XT~, niin taulukon pituus saadaan ohjelmassa
   lausekkeella 
   #+BEGIN_EXAMPLE
   XT.length
   #+END_EXAMPLE
   #+END_QUOTE
   
   Jos edellisessä esimerkissä olevat luvut
   call_taulukko-ympyrat-annetut-x() ovat taulukossa ~XT~, niin
   niihin voidaan viitata alla olevan kuvan mukaisesti. Taulukossa on
   11 lukua, jolloin indeksin suurin arvo on 10.
   #+NAME: taulukko-xkoordinaatit-taulukossa
   #+BEGIN_SRC asymptote :file taulukko-xkoordinaatit-taulukossa.svg :noweb yes
     size (8cm, 0);

     int[] coordinates = {<<taulukko-ympyrat-annetut-x>>};

     string tableSpecStr = "{r|";
     string headlineStr = "lauseke";
     string dataStr = "arvo";

     for (int i = 0; i < coordinates.length; ++i)
       {
         tableSpecStr += "c";
         headlineStr += "&" + "\texttt{XT} [" + (string) i + "]";
         dataStr += "&" + (string) (coordinates [i]);
       }
     tableSpecStr += "}";
     headlineStr += "\\";

     label ("\begin{tabular}" + tableSpecStr + headlineStr
            + "\hline " + dataStr + "\end{tabular}",
            (0, 0));
   #+END_SRC

   #+RESULTS: taulukko-xkoordinaatit-taulukossa
   [[file:taulukko-xkoordinaatit-taulukossa.svg]]

   #+BEGIN_QUOTE
   Jos taulukossa on $n$ lukua, niin taulukon indeksi on korkeintaan
   \((n - 1).\) Taulukon indeksin pienin arvo on aina 0.
   #+END_QUOTE

   Yllä oleva kuva on piirretty alla olevalla ohjelmalla. Ohjelmasta
   näkyy, miten taulukkovakio määritellään, ja miten taulukon luvut
   voidaan käydä läpi ~for~-silmukassa.

   #+BEGIN_SRC processing :noweb yes :exports code
   <<taulukko-ympyrat-annetuissa>>
   #+END_SRC
** Taulukkomuuttuja
   Taulukkomuuttujaa tarvitaan tyypillisesti silloin, kun muuttuvia
   tai satunnaisia lukujoukkoja käytetään ohjelmassa
   toistuvasti. Taulukkomuuttujan käyttö on hieman hankalampaa, koska
   taulukkomuuttujan määrittelyn lisäksi taulukolle täytyy erikseen
   varata tila.

   #+BEGIN_QUOTE
   Desimaalukuja sisältävä taulukkomuuttuja ~xt~ määritellään
   lausekkeella
   #+BEGIN_EXAMPLE
   float[] xt;
   #+END_EXAMPLE
   Taulukkoon varataan tilaa 20 luvulle lausekkeella
   #+BEGIN_EXAMPLE
   xt = new float [20];
   #+END_EXAMPLE
   Taulukkomuuttujan arvoa voidaan muuttaa sijoittamalla lukuja
   taulukkoon. Taulukon kolmanteen paikkaan (indeksi 2) sijoitetaan
   luku 75 lausekkeella
   #+BEGIN_EXAMPLE
   xt [2] = 75;
   #+END_EXAMPLE
   #+END_QUOTE

   [[file:taulukko-ympyrat-savy-sivu.org][Tällä sivulla]] olevassa animaatiossa arvotaan ensin ympyröiden
   keskipisteille satunnaiset \(x\)-koordinaatit. Sen jälkeen kaikki
   ympyrät piirretään kerran sekunnissa samalla satunnaisella
   värisävyllä. Koordinaatit kannattaa tallentaa taulukkoon, koska
   niitä tarvitaan toistuvasti piirtofunktiossa ~draw()~. Animaatio
   piirretään alla olevalla ohjelmakoodilla.

   #+BEGIN_SRC processing :exports code :noweb yes
   <<taulukko-ympyrat-savy>>
   #+END_SRC
** {{{example}}}
   Yksittäinen piirtoikkunan piste kohdassa ~(x, y)~ voidaan piirtää
   funktiolla
   #+BEGIN_EXAMPLE
   void point (float x, float y)
   #+END_EXAMPLE
   Pisteen väri voidaan määrätä funktiolla ~stroke()~.
   
   [[file:taulukko-pisteet-sivu.org][Tällä sivulla]] oleva animaatio piirretään alla olevalla ohjelmakoodilla. 

   #+BEGIN_SRC processing :exports code :noweb yes
   <<taulukko-pisteet>>
   #+END_SRC
** Tehtäviä
   1. Määrittele ohjelmaasi taulukko, jossa on seuraavat luvut:
      call_taulukko-neliot-annetut-y(). Piirrä \(400\times
      400\)-kokoiseen piirtoikkunaan \(20\times 20\)-kokoisia neliöitä
      siten, että kunkin neliön vasemman yläkulman \(y\)-koordinaatti
      on yksi taulukon luvuista. Neliöt ovat piirtoikkunan vasemmassa
      reunassa alla olevan kuvan mukaisesti.
      #+NAME: taulukko-neliot-annetuissa
      #+BEGIN_SRC processing :noweb yes
        size (400, 400);

        final int SIVU = 20;

        final float[] YT = {<<taulukko-neliot-annetut-y>>};

        for (int i = 0; i < YT.length; i++)
          rect (0, YT [i], SIVU, SIVU);
      #+END_SRC
   2. Tee [[file:taulukko-varisavyt-sivu.org][tällä sivulla]] näkyvä animaatio seuraavasti. 
      - Määrittele ohjelmaasi taulukkovakio, jossa on seuraavat
        varisävyt: call_taulukko-varisavyarvot().
      - Piirtofunktiossa ~draw()~ arvo sopivan suuruinen satunnainen
        kokonaisluku ja valitse taustavärin sävy käyttämällä arpomaasi
        lukua taulukon indeksinä.
   3. Tee [[file:taulukko-liikkuva-ympyra-sivu.org][tällä sivulla]] oleva animaatio seuraavasti:
      - Määrittele ohjelmaasi kaksi taulukkovakiota. Taulukossa ~XT~
        on luvut call_taulukko-liikkuva-ympyra-x() ja taulukossa ~YT~
        luvut call_taulukko-liikkuva-ympyra-y(). Ensimmäinen taulukko
        sisältää ympyröiden keskipisteiden \(x\)- ja toinen vastaavat
        \(y\)-koordinaatit. Ympyröiden keskipisteet ovat siis
        #+BEGIN_EXAMPLE
        (XT [0], YT [0])
        #+END_EXAMPLE
        ja niin edelleen.
      - Käytä ohjelmassasi kokonaislukumuuttujaa ~indeksi~ valitsemaan
        vuorotellen taulukoista ympyrälle eri keskipiste. Muuttujan
        ~indeksi~ arvo kasvaa yhdellä kullakin kierroksella ja palaa
        arvoon nolla viimeisen keskipisteen jälkeen.
   4. Tee [[file:taulukko-ympyrat-halkaisijalla-sivu.org][tällä sivulla]] näkyvä animaatio, jossa piirtoikkunan
      halkaisijalle satunnaisiin kohtiin piirretyt ympyrät piirretään
      sekunnin välein vuorotellen valkoisella ja mustalla värillä.
   5. Alla oleva kuva on piirretty ohjelmalla, joka toimii
      seuraavasti.
      - Kuvaan piirretään 20 ympyrää satunnaisiin kohtiin. Osa
        ympyrästä voi olla piirtoikkunan ulkopuolella: riittää, että
        ympyrän keskipiste on piirtoikkunassa.
      - Jokaisen ympyrän keskipisteestä piirretään viiva satunnaisesti
        valitun toisen ympyrän keskipisteeseen. (Satunnaisesti valittu
        toinen ympyrä voi olla myös ympyrä itse.)
      Tee vastaava ohjelma.
      #+NAME: taulukko-satunnaiset-ympyraparit
      #+BEGIN_SRC processing
        final int YMPYROITA = 20;
        final int HALKAISIJA = 10;

        size (600, 600);
        colorMode (HSB, 100);
        background (0);
        fill (100);
        stroke (100);

        float[] xt, yt;

        xt = new float [YMPYROITA];
        yt = new float [YMPYROITA];

        for (int i = 0; i < YMPYROITA; i++)
        {
          xt [i] = random (width);
          yt [i] = random (height);
          ellipse (xt [i], yt [i], HALKAISIJA, HALKAISIJA);
        }

        for (int i = 0; i < YMPYROITA; i++)
        {
          int kohdeIndeksi = floor (random (YMPYROITA));
          line (xt [i], yt [i], xt [kohdeIndeksi], yt [kohdeIndeksi]);
        }
      #+END_SRC
   6. Alla oleva ohjelmakoodi arpoo muuttujiin ~xMuutos~ ja ~yMuutos~
      satunnaisen mittaisen muutoksen satunnaiseen suuntaan
      \(xy\)-tasossa. Muutoksen suuruus on korkeintaan yksi. Muuttujia
      ~suunta~ ja ~pituus~ käytetään muutosten suuruuden laskemiseen,
      mutta niitä ei tarvita koodissa muualla.
      #+BEGIN_SRC processing :noweb yes :exports code
      <<taulukko-rajahdys-satunnaismuutos>>
      #+END_SRC
      Ohjelmoi [[file:taulukko-rajahdys-sivu.org][tällä sivulla]] näkyvä animaatio yllä olevan
      ohjelmakoodin avulla. Voit aloittaa kopioimalla ohjelmakoodin
      tämän kappaleen viimeisestä esimerkistä.
** Ratkaisuja
   1. 
      #+BEGIN_SRC processing :exports code :noweb yes
      <<taulukko-neliot-annetuissa>>
      #+END_SRC
   2. 
      #+BEGIN_SRC processing :exports code :noweb yes
      <<taulukko-varisavyt>>
      #+END_SRC
   3. 
      #+BEGIN_SRC processing :exports code :noweb yes
      <<taulukko-liikkuva-ympyra>>
      #+END_SRC
   4. 
      #+BEGIN_SRC processing :exports code :noweb yes
      <<taulukko-ympyrat-halkaisijalla>>
      #+END_SRC
   5. 
      #+BEGIN_SRC processing :exports code :noweb yes
      <<taulukko-satunnaiset-ympyraparit>>
      #+END_SRC
   6. 
      #+BEGIN_SRC processing :exports code :noweb yes
      <<taulukko-rajahdys>>
      #+END_SRC
      

#+INCLUDE: taulukko-ympyrat-savy.org
#+INCLUDE: taulukko-pisteet.org
#+INCLUDE: taulukko-ympyrat-halkaisijalla.org
#+INCLUDE: taulukko-varisavyt.org
#+INCLUDE: taulukko-liikkuva-ympyra.org
#+INCLUDE: taulukko-rajahdys.org

   
