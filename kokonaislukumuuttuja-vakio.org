#+INCLUDE: ohjelmointi-kappaleiden-yhteiset-asetukset.org

* Kokonaislukumuuttuja ja -vakio
** Liukuluvun ja kokonaisluvun ero
   Tietokoneessa liukulukujen eli ~float~-tyyppisten muuttujien esitys
   poikkeaa kokonaislukujen esityksestä. Täten Processing kielen luvut
   ~1~ ja ~1.0~ esitetään tietokoneessa eril lailla, joten ne eivät
   välttämättä ole täsmälleen yhtä suuria. Niinpä seuraavassa
   ohjelmassa /ei voida taata/, että ehto ~(a == 1)~ on tosi, vaikka
   muuttujan ~a~ arvo on kolmen desimaalin tarkkuudella ~1.000~.

   #+BEGIN_SRC processing :exports both
     size (200, 200);
     colorMode (HSB, 100);

     float a = 0.1; // muuttujan a arvo alussa

     // lisätään 0.1 niin kauan, kun a < 0.99
     while (a < 0.99)
       a = a + 0.1;
     // tämän jälkeen muuttujan a arvo lienee 1

     if (a == 1) // MUTTA tämä ehto voi olla tosi tai sitten ei
       background (30, 100, 100); // vihreä jos a:n arvo on 1
     else
       background (0, 100, 100); // punainen, jos a:n arvo ei ole 1

     // piirretään vielä luku a tekstinä kuvan keskelle
     fill (0);
     textSize (40); // selitys alla
     textAlign (CENTER, CENTER); // selitys alla
     text (a, width / 2.0, height / 2.0); // selitys alla
   #+END_SRC

   #+BEGIN_QUOTE
   Tietokoneohjelmassa liukuluku ~1.0~ ja kokonaisluku ~1~ eivät
   välttämättä ole täsmälleen sama luku. Tällä on merkitystä
   erityisesti silloin, kun lukuja vertaillaan jollain
   vertailuoperaattoreista ~==~, ~>=~ tai ~<=~, ~>~ tai ~<~.
   #+END_QUOTE
** Kokonaislukumuuttuja ja -vakio
   #+BEGIN_QUOTE
   Jos jokin muuttuja tai vakio on kokonaisluku, määrittelyssä
   käytetään ~float~ sanan sijasta sanaa ~int~, joka tulee englannin
   kielen kokonaislukua tarkoittavasta sanasta /integer/. Tällöin on
   syytä muistaa aiemmin esitetyt kokonaislukujen jakolaskun
   ominaisuudet: kahden kokonaisluvun jakolaskun tulos on aina
   kokonaisluku.
   #+END_QUOTE
** Luvun piirtäminen tekstinä piirtoikkunaan
   Luku voidaan piirtää tekstinä funktion ~text()~ avulla. Tekstin
   kokoa voidaan muuttaa funktiolla ~textSize()~, ja tekstin
   sijoittelua suhteessa annettuun kohtaan funktiolla
   ~textAlign()~. Alla esimerkki.

   #+BEGIN_SRC processing :exports both
     size (200, 200);
     colorMode (HSB, 100);
     background (0); // musta tausta
     fill (100); // valkoinen teksti

     textSize (60); // tekstin koko 30 pikseliä

     // tekstin keskikohta piirretään annettuun kohtaan
     textAlign (CENTER, CENTER);

     text (42, 100, 100);
   #+END_SRC
** Esimerkki
   Piirretään \(1000\times 100\)-kokoiseen ikkunaan mustalle taustalle
   25 pientä ympyrää vasemmalta oikealle. Pisteet ovat pystysuunnassa
   piirtoikkunan keskellä. Kunkin ympyrän kohdalle piirretään numero,
   joka kertoo kuinka monentena ympyrä on piirretty. Kymmenes ympyrä
   on punainen, muut ovat sinisiä. Ympyröiden keskipisteiden väli on
   30, joka on myös vasemmanpuoleisen pisteen
   \(x\)-koordinaatti. Tekstin koko on 16 pikseliä.

   #+NAME: kokonaisluku-luvut-rivissa
   #+BEGIN_SRC processing
     size (1000, 100);
     colorMode (HSB, 100);
     background (0); // musta tausta
     textSize (16); // tekstin koko
     textAlign (CENTER, CENTER); // tekstin keskikohta annetuissa koordinaateissa

     final float VALI = 30; // tekstin keskipisteiden väli
     float x = VALI; // tekstin keskipisteen x-koordinaatti
     final float Y = height / 2.0; // tekstin keskipisteen Y-koordinaatti

     int n = 1; // piirrettävä numero

     // piirretään 25 numeroa
     while (n <= 25) // turvallista vertailla, kun n on kokonaisluku
     {
       if (n == 10) // turvallista vertailla
         fill (0, 100, 100); // punainen teksti
       else
         fill (100); // valkoinen teksti
    
       // luku tekstinä
       text (n, x, Y);

       x = x + VALI; // seuraavan keskipisteen x
       n = n + 1; // seuraava numero
     }
   #+END_SRC

   #+BEGIN_SRC processing :exports code :noweb yes
   <<kokonaisluku-luvut-rivissa>>
   #+END_SRC

   Esimerkissä myös vakio ~VALI~ sekä muuttuja ~x~ /voitaisiin/
   määritellä kokonaisluvuiksi, koska ne saavat vain
   kokonaislukuarvoja. Muuttuja ~n~ on kuitenkin /pakko/ määritellä
   kokonaislukuna, jotta vertailut onnistuvat varmasti.

** Milloin käytetään kokonaislukumuuttujaa tai -vakiota?
   #+BEGIN_QUOTE
   Kokonaislukumuuttujaa täytyy käyttää silloin, kun
   - muuttuja saa vain kokonaislukuarvoja ja
   - muuttujaa käytetään myös muuhun kuin piirtokoordinaattien
     laskemiseen (kuten muuttujan arvon vertaamiseen kokonaislukuun).
   Kokonaislukuvakiota täytyy käyttää samanlaisissa tilanteissa.

   Liukulukumuuttujaa (tai vakiota) täytyy käyttää silloin, kun
   muuttuja saa desimaalilukuarvoja.

   Muissa tapauksissa ohjelmoija voi valita, haluaako hän käyttää
   kokonaisluku- vai liukulukumuuttujaa. Kokonaisluvut vievät vähemmän
   tilaa tietokoneen muistista, ja niillä laskeminen on nopeampaa.
   #+END_QUOTE
** Jakojäännös
   #+BEGIN_QUOTE
   Jos ~n~ ja ~m~ ovat epänegatiivisa kokonaislukuja ja ~m~ ei ole 0,
   niin Processing-kielen laskutoimitus ~n % m~ antaa jakojäännöksen,
   kun luku ~n~ jaeteen luvulla ~m~.
   #+END_QUOTE
** Esimerkki
   #+BEGIN_SRC processing :exports both
     size (800, 200);

     final float Y = height / 2.0; // tekstin y-koordinaatti

     textSize (30);
     textAlign (CENTER, CENTER);

     text (49 % 7, 100, Y); // jakojäännös, kun 49 jaetaan luvulla 7
     text (7 % 5, 200, Y); 
     text (5 % 7, 300, Y);
     text (0 % 2, 400, Y);
     text (1 % 2, 500, Y);
     text (2 % 2, 600, Y);
     text (3 % 2, 700, Y);
   #+END_SRC
   Esimerkin viimeisistä luvuista huomataan, että kokonaisluvun
   jakojäännös jaettaessa luvulla 2 on
   - 0, jos luku on parillinen
   - 1, jos luku on pariton.
** Kokonaislukumuuttujan arvon muuttaminen yhdellä
   #+BEGIN_QUOTE
   Koska ohjelmissa joudutaan usein kasvattamaan kokonaislukumuuttujan
   arvoa yhdellä, tätä varten on olemassa erillinen merkintä. Merkintä
   ~n++~ tarkoittaa samaa kuin ~n = n + 1.~

   Vastaavasti merkintä ~n--~ tarkoittaa samaa kuin ~n = n - 1.~
   #+END_QUOTE
** Esimerkki
   Piirretään alla olevan kuvan mukaisesti siniselle taustalle
   mahdollisimman monta mustaa neliötä piirtoikkunaan, jonka leveys on
   suurempi kuin korkeus. Kahden mustan neliön välissä on yhtä suuri
   sininen neliö. Neliöiden sivun pituus on yhtä suuri kuin
   piirtoikkunan korkeus.
   #+BEGIN_SRC processing :exports both
     size (1000, 110);
     colorMode (HSB, 100);
     background (62, 100, 100); // sininen tausta
     fill (0); // piirretään mustia neliöitä

     int sivu = height; // neliön sivun pituus on ikkunan korkeus
     int NELIOITA = width / sivu; // neliöiden lukumäärä

     int n = 0; // kuinka monta neliötä on jo piirretty

     while (n < NELIOITA) // niin kauan kun neliöitä ei ole riittävästi
     {
       // jos on piirretty parillinen määrä, piirretään musta neliö
       if (n % 2 == 0)
         rect (n * sivu, 0, sivu, sivu);

       n++; // kasvatetaan järjestysnumeroa
     }
   #+END_SRC
