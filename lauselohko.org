#+INCLUDE: ohjelmointi-kappaleiden-yhteiset-asetukset.org

* Lauselohko
** Esimerkki
  Kirjoitetaan ohjelma, joka piirtää piirtoikkunan keskelle ympyrän
  seuraavasti.
  - Jos ikkunan leveys on suurempi kuin korkeus, piirretään mustalle
    taustalle ympyrä, jonka halkaisija on 100.
  - Muussa tapauksessa piirretään siniselle pohjalle ympyrä, jonka
    halkaisija on 50.

  Muistamme, että ~if-else~-rakenne näyttää seuraavalta.
  #+BEGIN_EXAMPLE
  if (ehto)
    lauseke, joka suoritetaan jos ehto tosi;
  else
    lauseke, joka suoritetaan jos ehto ei ole tosi;
  #+END_EXAMPLE
  Suunnittelemassamme ohjelmassa ehto vaikuttaa kahteen asiaan: sekä
  taustaväriin että ympyrän halkaisijaan. Ehdon ollessa tosi halutaan
  siis suorittaa useampi lauseke.
  
  /Lauselohkot/ helpottavat ohjelman kirjoittamista.

  #+BEGIN_QUOTE
  Lauselohko alkaa ~{~-merkillä ja päättyy
  ~}~-merkkiin. ~if-else~-rakenteessa lauselohkot näyttävät
  seuraavilta.
  #+BEGIN_EXAMPLE
  if (ehto)
  {
    lauseke;
    toinen lauseke;
    ...
    viimeinen lauseke;
  }
  else
  {
    lauseke;
    toinen lauseke;
    ...
    viimeinen lauseke;
  }
  #+END_EXAMPLE
  Lauselohko yhdistää toisiinsa useita lausekkeita siten, että
  ohjelmointikielen rakenne, kuten ~if-else~-rakenne, käsittelee niitä
  yhtenä lausekkeena.
  #+END_QUOTE

  Ohjelmamme näyttää seuraavalta.
  #+BEGIN_SRC processing :exports both
    size (200, 300);

    colorMode (HSB, 100);
    noStroke ();

    float halkaisija;
    if (width > height)
    {
      background (0); // musta tausta
      halkaisija = 100;
    }
    else
    {
      background (63, 100, 100); // sininen tausta
      halkaisija = 50;
    }

    ellipse (width / 2.0, height / 2.0, halkaisija, halkaisija);
  #+END_SRC
** Esimerkki
   Kirjoitetaan ohjelma, joka piirtää suorakulmion \(600\times
   400\)-kokoiseen piirtoikkunaan seuraavasti. Ohjelmassa määritellään
   neljän vakion avulla kaksi piirtoikkunan pistettä $A$ ja $B$:
    - ~X_A~ määrittää pisteen $A$ \(x\)-koordinaatin ja ~Y_A~ saman
      pisteen \(y\)-koordinaatin
    - ~X_B~ määrittää pisteen $B$ \(x\)-koordinaatin ja ~Y_B~ saman
      pisteen \(y\)-koordinaatin.
   Ohjelma piirtää suorakulmion, jonka vastakkaiset kärkipisteet ovat
   $A$ ja \(B.\)

   Suorakulmio voidaan piirtää sen jälkeen, kun on selvitetty vasen
   yläkulma ja oikea alakulma. Nämä riippuvat siitä, miten $A$ ja $B$
   sijaitsevat. Alla olevassa kuvassa on piste $A(300, 200$ sekä
   vaihtoehtoja pisteelle \(B.\) Jos piste $B$ on kuvaan piirretty
   vihreä piste, niin silloin vasen yläkulma on punainen piste ja
   oikea alakulma sininen piste. Kulmien koordinaatit voidaan päätellä
   seuraavasti.
   - Vasemman yläkulman \(x\)-koordinaatti on aina pienempi pisteiden
     $A$ ja $B$ \(x\)-koordinaateista. Esimerkiksi kuvassa se on
     pienempi luvuista 300 ja 120, eli 120.
   - Oikean alakulman \(x\)-koordinaatti on aina suurempi pisteiden
     $A$ ja $B$ \(x\)-koordinaateista.  Esimerkiksi kuvassa se on
     suurempi luvuista 300 ja 120, eli 300.
   - Vastaavasti vasemman yläkulman \(y\)-koordinaatti on aina
     pienempi pisteiden $A$ ja $B$ \(y\)-koordinaateista. Ja niin
     edelleen.

   #+BEGIN_SRC asymptote :file suorakulmio-karkipisteista.svg :cache yes
     int LEVEYS = 600, KORKEUS = 400;
     size (LEVEYS, KORKEUS);
     filldraw (xscale (LEVEYS) * yscale (KORKEUS) * unitsquare, white);

     // muunnos Processing-koordinaatistosta perinteiseen koordinaatistoon
     transform T = shift ((0, KORKEUS)) * yscale (-1); 

     pair A = (LEVEYS / 2, KORKEUS / 2);
     dot ("$A$" + ((string) A), T * A);
     real[] osuudet = { .2, .8};
     int i = 0;
     for (real m : osuudet)
       for (real n : osuudet)
         {
   	pair B = (m * LEVEYS, n * KORKEUS);
   	string BTeksti = "$B$";
   	pen BVari = black;
   	if (++i == 2)
             {
               pair alakulma = minbound (A, B);
               pair ylakulma = maxbound (A, B);
               dot ((string) alakulma, T * alakulma,
   		unit (T * alakulma - T * A), 
   		red);
               dot ((string) ylakulma, T * ylakulma,
   		unit (T * ylakulma - T * A), 
   		blue);
               real l = ylakulma.x - alakulma.x; // suorakaiteen leveys
               real k = ylakulma.y - alakulma.y; // suorakaiteen korkeus
               draw (T * shift (alakulma) * scale (l, k) * unitsquare);
               BTeksti += (string) B;
               BVari = green;
             }
             dot (BTeksti, T * B, unit (T * B - T * A), BVari);
         }
   #+END_SRC

   #+RESULTS[c2a9f690bced7a87d82327f9d49f10ebf681491f]:
   [[file:suorakulmio-karkipisteista.svg]]

   Vastaava ohjelma näyttää seuraavalta.
   #+BEGIN_SRC processing :exports both
     size (600, 400);
     final float X_A = 300, Y_A = 200;
     final float X_B = 120, Y_B = 320;

     float ylakulmaX, ylakulmaY; // vasemman yläkulman koordinaatit
     float alakulmaX, alakulmaY; // oikean alakulman koordinaatit

     if (X_A < X_B)
     {
       ylakulmaX = X_A;
       alakulmaX = X_B;
     }
     else
     {
       ylakulmaX = X_B;
       alakulmaX = X_A;
     }

     if (Y_A < Y_B)
     {
       ylakulmaY = Y_A;
       alakulmaY = Y_B;
     }
     else
     {
       ylakulmaY = Y_B;
       alakulmaY = Y_A;
     }

     // suorakulmion leveys ja korkeus
     float leveys = alakulmaX - ylakulmaX;
     float korkeus = alakulmaY - ylakulmaY;

     rect (ylakulmaX, ylakulmaY, leveys, korkeus);
   #+END_SRC
** Tehtävät
   1. Kirjoita ohjelma, joka piirtää \(400\times 400\)-kokoisen
      piirtoikkunan yläreunaan erilaisen kuvion vakion ~P~ arvosta
      riippuen. Vakion ~P~ arvo on vähintään 10 ja korkeintaan 200.
      - Jos ~P~ on alle 100, piirretään punainen neliö, jonka sivun
        pituus on ~P~.
      - Muuten piirretään vihreä ympyrä, jonka halkaisija on ~P~.
      Testaa ohjelmasi toimivuus eri vakion ~P~ arvoilla.
   2. Kirjoita ohjelma, jossa piirretään \(200\times 400\)-kokoiseen
      piirtoikkunaan mustalle taustalle päällekkäin kaksi ympyrää,
      joiden halkaisija on 200. Ohjelmassa määritellään yksi vakio
      ~P~, jonka arvo on vähintään 0 ja korkeintaan 200. 
      - Jos ~P~ on korkeintaan 100, ylempi ympyrä on punainen ja
        alempi oranssi, ja ylemmän ympyrän värin kirkkaus on ~(100 -
        P)~ ja alemman ~P~.
      - Muussa tapauksessa ylempi ympyrä on oranssi ja alempi vihreä,
        ja ylemmän ympyrän värin kirkkaus on ~(200 - P)~ ja
        alemman ~(P - 100)~. 
      Alla on esimerkki ohjelman piirtämästä kuvasta vakion ~P~
      arvolla 110. Testaa ohjelmasi toimivuutta eri vakion ~P~
      arvoilla.
      #+NAME: kaksi-liikennevaloa
      #+BEGIN_SRC processing
        size (200, 400);
        final float P = 110;
        final float HALKAISIJA = width;
        final float SADE = HALKAISIJA / 2;

        colorMode (HSB, 100);
        final float PUNAINEN_SAVY = 0, ORANSSI_SAVY = 10, VIHREA_SAVY = 33;
        float ylemmanSavy, alemmanSavy;
	float ylemmanKirkkaus, alemmanKirkkaus;

        background (0);

        if (P <= 100)
        {
          ylemmanSavy = PUNAINEN_SAVY;
          alemmanSavy = ORANSSI_SAVY;
	  ylemmanKirkkaus = 100 - P;
	  alemmanKirkkaus = P;
        }
        else
        {
          ylemmanSavy = ORANSSI_SAVY;
          alemmanSavy = VIHREA_SAVY;
	  ylemmanKirkkaus = 200 - P;
	  alemmanKirkkaus = P - 100;
        }

        fill (ylemmanSavy, 100, ylemmanKirkkaus);
        ellipse (SADE, SADE, HALKAISIJA, HALKAISIJA);
        fill (alemmanSavy, 100, alemmanKirkkaus);
        ellipse (SADE, HALKAISIJA + SADE, HALKAISIJA, HALKAISIJA);
      #+END_SRC
   3. Kirjoita ohjelma, joka piirtää piirtoikkunaan kaksi
      mahdollisimman suurta ympyrää joko päällekkäin tai vierekkäin
      riippuen siitä, kummalla tavalla saadaan piirrettyä suuremmat
      ympyrät. Toisen ympyrän tulee olla alla olevan esimerkkikuvan
      mukaisesti piirtoikkunan vasemmassa yläkulmassa ja toisen
      suoraan ensimmäisen vieressä tai alla. Testaa ohjelmasi
      toimivuutta seuraavan kokoisilla piirtoikkunoilla: \((500 \times
      400\)), \((500 \times 200\)), \((400 \times 500\)) sekä \((200
      \times 500\)).
      #+NAME: suurin-ympyräpari
      #+BEGIN_SRC processing exports both
        size (500, 200);

        float halkaisija; // ympyröiden halkaisija

        // ympyröiden keskipisteiden välinen erotus x- ja y-suunnissa
        float kpErotusX, kpErotusY;

        if (width > height)
        {
          // piirretään vierekkäin

	  // rajoittaako ympyrän koon ikkunan leveys vai korkeus?
          if (width / 2.0 < height)
            halkaisija = width / 2.0;
          else
            halkaisija = height;

          kpErotusX = halkaisija;
          kpErotusY = 0;
        }
        else
        {
          // piirretään päällekkäin

	  // rajoittaako ympyrän koon ikkunan korkeus vai leveys?
          if (height / 2.0 < width)
            halkaisija = height / 2.0;
          else
            halkaisija = width;

          kpErotusX = 0;
          kpErotusY = halkaisija;
        }

        float sade = halkaisija / 2.0;
        ellipse (sade, sade, halkaisija, halkaisija);
        ellipse (sade + kpErotusX, sade + kpErotusY, halkaisija, halkaisija);
      #+END_SRC

** Esimerkkiratkaisuja
   1. 
      #+NAME: punainen-nelio-vihrea-ympyra
      #+BEGIN_SRC processing :exports both
        size (400, 400);
        final float P = 70;
        colorMode (HSB, 100);
	noStroke (); // ei piirretä ääriviivoja
        if (P < 100)
        {
          fill (0, 70, 100); // punainen väri
          rect (0, 0, P, P);
        }
        else
        {
          fill (30, 70, 100); // vihreä väri
          final float SADE = P / 2;
          ellipse (SADE, SADE, P, P);
        }
      #+END_SRC
   2. 
      #+BEGIN_SRC processing :exports code :noweb yes
      <<kaksi-liikennevaloa>>
      #+END_SRC
   3. 
      #+BEGIN_SRC processing :exports code :noweb yes
      <<suurin-ympyräpari>>
      #+END_SRC
