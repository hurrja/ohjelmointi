#+INCLUDE: ohjelmointi-kappaleiden-yhteiset-asetukset.org

* Ehdollinen suorittaminen
** Esimerkki
   #+NAME: ehdollinen-kolmio-suunta-runko
   #+BEGIN_SRC processing :exports none
     // jos leveys on suurempi kuin korkeus
     if (width > height)
       triangle (0, 0, width, height / 2.0, 0, height); // kolmio oikealle
     else // muussa tapauksessa
       triangle (0, 0, width, 0, width / 2.0, height); // kolmio alas
   #+END_SRC

   Haluamme kirjoittaa ohjelman, joka toimii seuraavasti.
   - Jos piirtoikkunan leveys on suurempi kuin piirtoikkunan korkeus,
     piirretään \ldquo{}oikealla osoittava\rdquo{} kolmio.
     #+NAME: ehdollinen-kolmio-oikealle
     #+BEGIN_SRC processing :noweb yes :exports results
     size (300, 100);

     <<ehdollinen-kolmio-suunta-runko>>
     #+END_SRC
   - Muussa tapauksessa piirretään \ldquo{}alas osoittava\rdquo{}
     kolmio.
     #+BEGIN_SRC processing :noweb yes :exports results
     size (100, 200);

     <<ehdollinen-kolmio-suunta-runko>>
     #+END_SRC

   Ohjelma toimii siis eri tavoin eri tilanteissa. Tämä voidaan
   ohjelmoida /ehdollisen suorittamisen/ avulla. Ehdollisessa
   suorittamisessa käytetään Processing-kielen varattuja sanoja ~if~
   (jos) sekä ~else~ (muutoin).

   #+BEGIN_SRC processing :noweb yes :exports code
     <<ehdollinen-kolmio-oikealle>>
   #+END_SRC
** ~if-else~ -rakenne     
   #+BEGIN_QUOTE
   ~if-else~ -rakenteessa on
   1. ~ehto~, joka määrää mikä lauseke suoritetaan
   2. lauseke, joka suoritetaan jos ehto on tosi
   3. lauseke, joka suoritetaan jos ehto ei ole tosi.
   #+BEGIN_EXAMPLE
     if (ehto)
       lauseke suoritetaan jos ehto tosi;
     else
       lauseke suoritetaan jos ehto ei tosi;
   #+END_EXAMPLE
   #+END_QUOTE

   Huomaa, että
   - ~if~-rivin lopussa ei ole puolipistettä
   - ~else~-rivin lopussa ei ole puolipistettä.

   Yleensä lausekerivit sisennetään, jotta nähdään mihin lausekkeeseen
   ehto vaikuttaa. Processing-editori sisentää lausekkeet
   valikosta ~Edit~ \(\rightarrow\) ~Autoformat~ tai suoraan
   näppäinkomennolla ~Ctrl+t~.
** Lukujen vertaileminen
   Jos ~if-else~ -rakenteen ehdossa vertaillaan lukuja, tarvitaan
   lukujen vertailuoperaattoreita.

   | ehtolauseke | merkitys                                  |
   |-------------+-------------------------------------------|
   | ~a < b~     | onko ~a~ pienempi kuin ~b~                |
   | ~a <= b~    | onko ~a~ pienempi tai yhtä suuri kuin ~b~ |
   | ~a > b~     | onko ~a~ suurempi kuin ~b~                |
   | ~a >= b~    | onko ~a~ suurempi tai yhtä suuri kuin ~b~ |
   | ~a == b~    | onko ~a~ yhtä suuri kuin ~b~              |
   | ~a != b~    | onko ~a~ eri suuri kuin ~b~               |

   Yllättävintä on yhtäsuuruuden testaaminen.
   #+BEGIN_QUOTE
   Lukujen ~a~ ja ~b~ yhtäsuuruus testataan vertailuoperaattorilla
   ~==~, jossa on kaksi yhtäsuuruusmerkkiä peräkkäin.
   #+END_QUOTE
** Esimerkki
   Piirretään neliön muotoiseen piirtoikkunaan ympyrä tai nelikulmio
   riippuen vakion ~P~ arvosta. Jos ~P~ on alle 95 piirretään ympyrä,
   muuten nelikulmio.

   #+NAME: ehdollinen-ympyra-nelio-runko
   #+BEGIN_SRC processing :exports none
     if (P < 95)
       ellipse (100, 100, 100, 100);
     else
       rect (50, 50, 100, 100);
   #+END_SRC
   Ensin vakio on suurempi kuin 95, joten piirretään nelikulmio.
   #+BEGIN_SRC processing :noweb yes :exports both
     size (250, 250);
     final float P = 96;

     <<ehdollinen-ympyra-nelio-runko>>
   #+END_SRC

   Kun vakion arvoa lasketaan, piirretään ympyrä.
   #+BEGIN_SRC processing :noweb yes :exports both
     size (250, 250);
     final float P = 93;

     <<ehdollinen-ympyra-nelio-runko>>
   #+END_SRC
** Pelkkä ~if~-rakenne
   Seuraavassa esimerkissä piirretään neliö neliön muotoiseen
   piirtoikkunan keskelle. Piirtoikkunan vasempaan yläkulmaan
   piirretään toinen samankokoinen neliö, jos kuvassa on sille tilaa.
   
   #+BEGIN_SRC processing
     size (200, 200);
     final float SIVU = 10;

     // keskelle piirrettävän neliön koordinaatit (x- ja y-koordinaatti sama)
     final float X = width / 2.0 - SIVU / 2.0;
     rect (X, X, SIVU, SIVU);

     if (X >= SIVU)
       rect (0, 0, SIVU, SIVU);

   #+END_SRC
